<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>onceonmydoor</title>
  
  <subtitle>自己的小窝QAQ</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://onceonmydoor.github.io/"/>
  <updated>2019-02-18T03:07:26.733Z</updated>
  <id>https://onceonmydoor.github.io/</id>
  
  <author>
    <name>黄占杰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>&lt;Leetcode&gt;回溯算法总结</title>
    <link href="https://onceonmydoor.github.io/2019/02/18/Leetcode-%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://onceonmydoor.github.io/2019/02/18/Leetcode-回溯算法总结/</id>
    <published>2019-02-18T03:02:22.000Z</published>
    <updated>2019-02-18T03:07:26.733Z</updated>
    
    <content type="html"><![CDATA[<p>For Java version, please refer to <a href="https://discuss.leetcode.com/topic/46162/a-general-approach-to-backtracking-questions-in-java-subsets-permutations-combination-sum-palindrome-partioning" target="_blank" rel="noopener">isssac3’s answer.</a></p><p><strong>39. Combination Sum</strong><br><a href="https://leetcode.com/problems/combination-sum/" target="_blank" rel="noopener">https://leetcode.com/problems/combination-sum/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combinationSum</span><span class="params">(self, candidates, target)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(tmp, start, end, target)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> target == <span class="number">0</span>:</span><br><span class="line">            ans.append(tmp[:])</span><br><span class="line">        <span class="keyword">elif</span> target &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(start, end):</span><br><span class="line">                tmp.append(candidates[i])</span><br><span class="line">                backtrack(tmp, i, end, target - candidates[i])</span><br><span class="line">                tmp.pop()</span><br><span class="line">    ans = [] </span><br><span class="line">    candidates.sort(reverse= <span class="keyword">True</span>)</span><br><span class="line">    backtrack([], <span class="number">0</span>, len(candidates), target)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>40. Combination Sum II</strong><br><a href="https://leetcode.com/problems/combination-sum-ii/" target="_blank" rel="noopener">https://leetcode.com/problems/combination-sum-ii/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combinationSum2</span><span class="params">(self, candidates, target)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(start, end, tmp, target)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> target == <span class="number">0</span>:</span><br><span class="line">            ans.append(tmp[:])</span><br><span class="line">        <span class="keyword">elif</span> target &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(start, end):</span><br><span class="line">                <span class="keyword">if</span> i &gt; start <span class="keyword">and</span> candidates[i] == candidates[i<span class="number">-1</span>]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                tmp.append(candidates[i])</span><br><span class="line">                backtrack(i+<span class="number">1</span>, end, tmp, target - candidates[i])</span><br><span class="line">                tmp.pop()</span><br><span class="line">    ans = []</span><br><span class="line">    candidates.sort(reverse= <span class="keyword">True</span>)</span><br><span class="line">    backtrack(<span class="number">0</span>, len(candidates), [], target)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p><strong>78. Subsets</strong><br><a href="https://leetcode.com/problems/subsets/" target="_blank" rel="noopener">https://leetcode.com/problems/subsets/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subsets</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(start, end, tmp)</span>:</span></span><br><span class="line">        ans.append(tmp[:])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(start, end):</span><br><span class="line">            tmp.append(nums[i])</span><br><span class="line">            backtrack(i+<span class="number">1</span>, end, tmp)</span><br><span class="line">            tmp.pop()</span><br><span class="line">    ans = []</span><br><span class="line">    backtrack(<span class="number">0</span>, len(nums), [])</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p><strong>90. Subsets II</strong><br><a href="https://leetcode.com/problems/subsets-ii/" target="_blank" rel="noopener">https://leetcode.com/problems/subsets-ii/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subsetsWithDup</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(start, end, tmp)</span>:</span></span><br><span class="line">        ans.append(tmp[:])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(start, end):</span><br><span class="line">            <span class="keyword">if</span> i &gt; start <span class="keyword">and</span> nums[i] == nums[i<span class="number">-1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            tmp.append(nums[i])</span><br><span class="line">            backtrack(i+<span class="number">1</span>, end, tmp)</span><br><span class="line">            tmp.pop()</span><br><span class="line">    ans = []</span><br><span class="line">    nums.sort()</span><br><span class="line">    backtrack(<span class="number">0</span>, len(nums), [])</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p><strong>46. Permutations</strong><br><a href="https://leetcode.com/problems/permutations/" target="_blank" rel="noopener">https://leetcode.com/problems/permutations/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permute</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(start, end)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> start == end:</span><br><span class="line">            ans.append(nums[:])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(start, end):</span><br><span class="line">            nums[start], nums[i] = nums[i], nums[start]</span><br><span class="line">            backtrack(start+<span class="number">1</span>, end)</span><br><span class="line">            nums[start], nums[i] = nums[i], nums[start]</span><br><span class="line">            </span><br><span class="line">    ans = []</span><br><span class="line">    backtrack(<span class="number">0</span>, len(nums))</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p><strong>47. Permutations II</strong><br><a href="https://leetcode.com/problems/permutations-ii/" target="_blank" rel="noopener">https://leetcode.com/problems/permutations-ii/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permuteUnique</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(tmp, size)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(tmp) == size:</span><br><span class="line">            ans.append(tmp[:])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(size):</span><br><span class="line">                <span class="keyword">if</span> visited[i] <span class="keyword">or</span> (i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i<span class="number">-1</span>] == nums[i] <span class="keyword">and</span> <span class="keyword">not</span> visited[i<span class="number">-1</span>]):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                visited[i] = <span class="keyword">True</span></span><br><span class="line">                tmp.append(nums[i])</span><br><span class="line">                backtrack(tmp, size)</span><br><span class="line">                tmp.pop()</span><br><span class="line">                visited[i] = <span class="keyword">False</span></span><br><span class="line">    ans = []</span><br><span class="line">    visited = [<span class="keyword">False</span>] * len(nums)</span><br><span class="line">    nums.sort()</span><br><span class="line">    backtrack([], len(nums))</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p><strong>60. Permutation Sequence</strong><br><a href="https://leetcode.com/problems/permutation-sequence/" target="_blank" rel="noopener">https://leetcode.com/problems/permutation-sequence/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPermutation</span><span class="params">(self, n, k)</span>:</span></span><br><span class="line">    nums = [str(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>)]</span><br><span class="line">    fact = [<span class="number">1</span>] * n</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n):</span><br><span class="line">        fact[i] = i*fact[i<span class="number">-1</span>]</span><br><span class="line">    k -= <span class="number">1</span></span><br><span class="line">    ans = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">        id = k / fact[i<span class="number">-1</span>]</span><br><span class="line">        k %= fact[i<span class="number">-1</span>]</span><br><span class="line">        ans.append(nums[id])</span><br><span class="line">        nums.pop(id)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(ans)</span><br></pre></td></tr></table></figure><p><strong>131. Palindrome Partitioning</strong><br><a href="https://leetcode.com/problems/palindrome-partitioning/" target="_blank" rel="noopener">https://leetcode.com/problems/palindrome-partitioning/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(self, s)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(start, end, tmp)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> start == end:</span><br><span class="line">            ans.append(tmp[:])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(start, end):</span><br><span class="line">            cur = s[start:i+<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> cur == cur[::<span class="number">-1</span>]:</span><br><span class="line">                tmp.append(cur)</span><br><span class="line">                backtrack(i+<span class="number">1</span>, end, tmp)</span><br><span class="line">                tmp.pop()</span><br><span class="line">    ans = []</span><br><span class="line">    backtrack(<span class="number">0</span>, len(s), [])</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><hr><p><strong>267. Palindrome Permutation II</strong><br><a href="https://leetcode.com/problems/palindrome-permutation-ii/" target="_blank" rel="noopener">https://leetcode.com/problems/palindrome-permutation-ii/</a><br>Related to this two:<br><code>31. Next Permutation</code>: <a href="https://leetcode.com/problems/next-permutation/" target="_blank" rel="noopener">https://leetcode.com/problems/next-permutation/</a><br><code>266. Palindrome Permutation</code>: <a href="https://leetcode.com/problems/palindrome-permutation/" target="_blank" rel="noopener">https://leetcode.com/problems/palindrome-permutation/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generatePalindromes</span><span class="params">(self, s)</span>:</span></span><br><span class="line">    kv = collections.Counter(s)</span><br><span class="line">    mid = [k <span class="keyword">for</span> k, v <span class="keyword">in</span> kv.iteritems() <span class="keyword">if</span> v%<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">if</span> len(mid) &gt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    mid = <span class="string">''</span> <span class="keyword">if</span> mid == [] <span class="keyword">else</span> mid[<span class="number">0</span>]</span><br><span class="line">    half = <span class="string">''</span>.join([k * (v/<span class="number">2</span>) <span class="keyword">for</span> k, v <span class="keyword">in</span> kv.iteritems()])</span><br><span class="line">    half = [c <span class="keyword">for</span> c <span class="keyword">in</span> half]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(end, tmp)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(tmp) == end:</span><br><span class="line">            cur = <span class="string">''</span>.join(tmp)</span><br><span class="line">            ans.append(cur + mid + cur[::<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(end):</span><br><span class="line">                <span class="keyword">if</span> visited[i] <span class="keyword">or</span> (i&gt;<span class="number">0</span> <span class="keyword">and</span> half[i] == half[i<span class="number">-1</span>] <span class="keyword">and</span> <span class="keyword">not</span> visited[i<span class="number">-1</span>]):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                visited[i] = <span class="keyword">True</span></span><br><span class="line">                tmp.append(half[i])</span><br><span class="line">                backtrack(end, tmp)</span><br><span class="line">                visited[i] = <span class="keyword">False</span></span><br><span class="line">                tmp.pop()</span><br><span class="line">                </span><br><span class="line">    ans = []</span><br><span class="line">    visited = [<span class="keyword">False</span>] * len(half)</span><br><span class="line">    backtrack(len(half), [])</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;For Java version, please refer to &lt;a href=&quot;https://discuss.leetcode.com/topic/46162/a-general-approach-to-backtracking-questions-in-java-subsets-permutations-combination-sum-palindrome-partioning&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;isssac3’s answer.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;39. Combination Sum&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/combination-sum/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/combination-sum/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;combinationSum&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, candidates, target)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;backtrack&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(tmp, start, end, target)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; target == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ans.append(tmp[:])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; target &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(start, end):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                tmp.append(candidates[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                backtrack(tmp, i, end, target - candidates[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                tmp.pop()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ans = [] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    candidates.sort(reverse= &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    backtrack([], &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, len(candidates), target)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://onceonmydoor.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>SQL语法复习</title>
    <link href="https://onceonmydoor.github.io/2019/01/17/SQL%E8%AF%AD%E6%B3%95%E5%A4%8D%E4%B9%A0/"/>
    <id>https://onceonmydoor.github.io/2019/01/17/SQL语法复习/</id>
    <published>2019-01-17T09:43:00.000Z</published>
    <updated>2019-02-18T03:07:38.577Z</updated>
    
    <content type="html"><![CDATA[<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>索引是关系数据库中对某一列或多个列的值进行预排序的数据结构。通过使用索引，可以让数据库系统不必扫描整个表，而是直接定位到符合条件的记录，这样就大大加快了查询速度。</p><p>例如，对于<code>students</code>表：</p><table><thead><tr><th>id</th><th>class_id</th><th>name</th><th>gender</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>小明</td><td>M</td><td>90</td></tr><tr><td>2</td><td>1</td><td>小红</td><td>F</td><td>95</td></tr><tr><td>3</td><td>1</td><td>小军</td><td>M</td><td>88</td></tr></tbody></table><p>如果要经常根据<code>score</code>列进行查询，就可以对<code>score</code>列创建索引：</p><a id="more"></a><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">INDEX</span> idx_score (score);</span><br></pre></td></tr></table></figure><p>使用<code>ADD INDEX idx_score (score)</code>就创建了一个名称为<code>idx_score</code>，使用列<code>score</code>的索引。索引名称是任意的，索引如果有多列，可以在括号里依次写上，例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">INDEX</span> idx_name_score (<span class="keyword">name</span>, score);</span><br></pre></td></tr></table></figure><p>索引的效率取决于索引列的值是否散列，即该列的值如果越互不相同，那么索引效率越高。反过来，如果记录的列存在大量相同的值，例如<code>gender</code>列，大约一半的记录值是<code>M</code>，另一半是<code>F</code>，因此，对该列创建索引就没有意义。</p><p>可以对一张表创建多个索引。索引的优点是提高了查询效率，缺点是在插入、更新和删除记录时，需要同时修改索引，因此，索引越多，插入、更新和删除记录的速度就越慢。</p><h3 id="对于主键，关系数据库会自动对其创建主键索引。使用主键索引的效率是最高的，因为主键会保证绝对唯一。"><a href="#对于主键，关系数据库会自动对其创建主键索引。使用主键索引的效率是最高的，因为主键会保证绝对唯一。" class="headerlink" title="对于主键，关系数据库会自动对其创建主键索引。使用主键索引的效率是最高的，因为主键会保证绝对唯一。"></a>对于主键，关系数据库会自动对其创建主键索引。使用主键索引的效率是最高的，因为主键会保证绝对唯一。</h3><h3 id="常用的条件表达式"><a href="#常用的条件表达式" class="headerlink" title="常用的条件表达式"></a>常用的条件表达式</h3><table><thead><tr><th>条件</th><th>表达式举例1</th><th>表达式举例2</th><th>说明</th></tr></thead><tbody><tr><td>使用=判断相等</td><td>score = 80</td><td>name = ‘abc’</td><td>字符串需要用单引号括起来</td></tr><tr><td>使用&gt;判断大于</td><td>score &gt; 80</td><td>name &gt; ‘abc’</td><td>字符串比较根据ASCII码，中文字符比较根据数据库设置</td></tr><tr><td>使用&gt;=判断大于或相等</td><td>score &gt;= 80</td><td>name &gt;= ‘abc’</td><td></td></tr><tr><td>使用&lt;判断小于</td><td>score &lt; 80</td><td>name &lt;= ‘abc’</td><td></td></tr><tr><td>使用&lt;=判断小于或相等</td><td>score &lt;= 80</td><td>name &lt;= ‘abc’</td><td></td></tr><tr><td>使用&lt;&gt;判断不相等</td><td>score &lt;&gt; 80</td><td>name &lt;&gt; ‘abc’</td><td></td></tr><tr><td>使用LIKE判断相似</td><td>name LIKE ‘ab%’</td><td>name LIKE ‘%bc%’</td><td>%表示任意字符，例如’ab%’将匹配’ab’，’abc’，’abcd’</td></tr></tbody></table><h4 id="投影查询"><a href="#投影查询" class="headerlink" title="投影查询"></a>投影查询</h4><p>使用<code>SELECT 列1, 列2, 列3 FROM ...</code>时，还可以给每一列起个别名，这样，结果集的列名就可以与原表的列名不同。它的语法是<code>SELECT 列1 别名1, 列2 别名2, 列3 别名3 FROM ...</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, score points, <span class="keyword">name</span> <span class="keyword">FROM</span> students;</span><br></pre></td></tr></table></figure><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">name</span>, gender, score <span class="keyword">FROM</span> students <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>==DESC== ==“倒序”,,默认的排序规则是<code>ASC</code>：“升序”，即从小到大。<code>ASC</code>可以省略，即<code>ORDER BY score ASC</code>和<code>ORDER BY score</code>效果一样。</p><p>如果<code>score</code>列有相同的数据，要进一步排序，可以继续添加列名。例如，使用<code>ORDER BY score DESC, gender</code>表示先按<code>score</code>列倒序，如果有相同分数的，再按<code>gender</code>列排序：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">name</span>, gender, score <span class="keyword">FROM</span> students <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>, gender;</span><br></pre></td></tr></table></figure><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p>分页实际上就是从结果集中“截取”出第M~N条记录。这个查询可以通过<code>LIMIT &lt;M&gt; OFFSET &lt;N&gt;</code>子句实现。我们先把所有学生按照成绩从高到低进行排序：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">name</span>, gender, score</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">4</span> <span class="keyword">OFFSET</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>查询数据条数：</p><p>(聚合查询)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> Tablename</span><br><span class="line"><span class="comment">--或者</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> Tablename</span><br></pre></td></tr></table></figure><p><code>COUNT(*)</code>和<code>COUNT(id)</code>实际上是一样的效果。另外注意，聚合查询同样可以使用<code>WHERE</code>条件，因此我们可以方便地统计出有多少男生、多少女生、多少80分以上的学生等：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) boys <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> gender = <span class="string">'M'</span>;</span><br></pre></td></tr></table></figure><p>除了<code>COUNT()</code>函数外，SQL还提供了如下聚合函数：</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>SUM</td><td>计算某一列的合计值，该列必须为数值类型</td></tr><tr><td>AVG</td><td>计算某一列的平均值，该列必须为数值类型</td></tr><tr><td>MAX</td><td>计算某一列的最大值</td></tr><tr><td>MIN</td><td>计算某一列的最小值</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(score) average <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> gender = <span class="string">'M'</span>;</span><br></pre></td></tr></table></figure><p>分组</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> class_id, <span class="keyword">COUNT</span>(*) <span class="keyword">num</span> <span class="keyword">FROM</span> students <span class="keyword">GROUP</span> <span class="keyword">BY</span> class_id;</span><br></pre></td></tr></table></figure><p>多表查询</p><p>这种一次查询两个表的数据，查询的结果也是一个二维表，它是<code>students</code>表和<code>classes</code>表的“乘积”，即<code>students</code>表的每一行与<code>classes</code>表的每一行都两两拼在一起返回。结果集的列数是<code>students</code>表和<code>classes</code>表的列数之和，行数是<code>students</code>表和<code>classes</code>表的行数之积。</p><p>这种多表查询又称笛卡尔查询，使用笛卡尔查询时要非常小心，由于结果集是目标表的行数乘积，对两个各自有100行记录的表进行笛卡尔查询将返回1万条记录，对两个各自有1万行记录的表进行笛卡尔查询将返回1亿条记录。</p><p>你可能还注意到了，上述查询的结果集有两列<code>id</code>和两列<code>name</code>，两列<code>id</code>是因为其中一列是<code>students</code>表的<code>id</code>，而另一列是<code>classes</code>表的<code>id</code>，但是在结果集中，不好区分。两列<code>name</code>同理</p><p>要解决这个问题，我们仍然可以利用投影查询的“设置列的别名”来给两个表各自的<code>id</code>和<code>name</code>列起别名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    s.id <span class="keyword">sid</span>,</span><br><span class="line">    s.name,</span><br><span class="line">    s.gender,</span><br><span class="line">    s.score,</span><br><span class="line">    c.id cid,</span><br><span class="line">    c.name cname</span><br><span class="line"><span class="keyword">FROM</span> students s, classes c;</span><br></pre></td></tr></table></figure><p><strong>使用多表查询可以获取M x N行记录；</strong></p><p><strong>多表查询的结果集可能非常巨大，要小心使用。</strong></p><p>连接查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.id, s.name, s.class_id, c.name class_name, s.gender, s.score</span><br><span class="line"><span class="keyword">FROM</span> students s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> classes c</span><br><span class="line"><span class="keyword">ON</span> s.class_id = c.id;</span><br></pre></td></tr></table></figure><p>注意INNER JOIN查询的写法是：</p><ol><li>先确定主表，仍然使用<code>FROM &lt;表1&gt;</code>的语法；</li><li>再确定需要连接的表，使用<code>INNER JOIN &lt;表2&gt;</code>的语法；</li><li>然后确定连接条件，使用<code>ON &lt;条件...&gt;</code>，这里的条件是<code>s.class_id = c.id</code>，表示<code>students</code>表的<code>class_id</code>列与<code>classes</code>表的<code>id</code>列相同的行需要连接；</li><li>可选：加上<code>WHERE</code>子句、<code>ORDER BY</code>等子句。</li></ol><p><strong>INNER JOIN</strong>只返回同时存在于两张表的行数据，由于<code>students</code>表的<code>class_id</code>包含1，2，3，<code>classes</code>表的<code>id</code>包含1，2，3，4，所以，INNER JOIN根据条件<code>s.class_id = c.id</code>返回的结果集仅包含1，2，3。</p><p><strong>RIGHT OUTER JOIN</strong>返回右表都存在的行。如果某一行仅在右表存在，那么结果集就会以<code>NULL</code>填充剩下的字段。</p><p><strong>LEFT OUTER JOIN</strong>则返回左表都存在的行。如果我们给students表增加一列，并添加class_id=5，由于classes表并不存在id=5的列，所以，LEFT OUTER JOIN的结果会增加一列，对应的<code>class_name</code>是<code>NULL</code>：</p><p>INNER JOIN只返回同时存在于两张表的行数据，由于<code>students</code>表的<code>class_id</code>包含1，2，3，<code>classes</code>表的<code>id</code>包含1，2，3，4，所以，INNER JOIN根据条件<code>s.class_id = c.id</code>返回的结果集仅包含1，2，3。</p><p>RIGHT OUTER JOIN返回右表都存在的行。如果某一行仅在右表存在，那么结果集就会以<code>NULL</code>填充剩下的字段。</p><p>LEFT OUTER JOIN则返回左表都存在的行。如果我们给students表增加一列，并添加class_id=5，由于classes表并不存在id=5的列，所以，LEFT OUTER JOIN的结果会增加一列，对应的<code>class_name</code>是<code>NULL</code>：</p><p>我们使用FULL OUTER JOIN，它会把两张表的所有记录全部选择出来，并且，自动把对方不存在的列填充为NULL：</p><p>对于这么多种JOIN查询，到底什么使用应该用哪种呢？其实我们用图来表示结果集就一目了然了。</p><p>假设查询语句是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT ... FROM tableA ??? JOIN tableB ON tableA.column1 = tableB.column2;</span><br></pre></td></tr></table></figure><p>我们把tableA看作左表，把tableB看成右表，那么INNER JOIN是选出两张表都存在的记录：</p><p><img src="/img/inner.png" alt="inner-join"></p><p>LEFT OUTER JOIN是选出左表存在的记录：</p><p><img src="/img/left.png" alt="left-outer-join"></p><p>RIGHT OUTER JOIN是选出右表存在的记录：</p><p><img src="/img/right.png" alt="right-outer-join"></p><p>FULL OUTER JOIN则是选出左右表都存在的记录：</p><p><img src="/img/full.png" alt="full-outer-join"></p><h4 id="删除和更新数据要小心"><a href="#删除和更新数据要小心" class="headerlink" title="删除和更新数据要小心"></a>删除和更新数据要小心</h4><p>要特别小心的是，和<code>UPDATE</code>类似，不带<code>WHERE</code>条件的<code>DELETE</code>语句会删除整个表的数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> students;</span><br></pre></td></tr></table></figure><p>这时，整个表的所有记录都会被删除。所以，在执行<code>DELETE</code>语句时也要非常小心，最好先用<code>**SELECT</code>语句来测试<code>WHERE</code>条件是否筛选出了期望的记录集**，然后再用<code>DELETE</code>删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> <span class="keyword">id</span> <span class="keyword">in</span> (<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">9</span>);</span><br></pre></td></tr></table></figure><p>要管理MySQL，可以使用可视化图形界面<a href="https://dev.mysql.com/downloads/workbench/" target="_blank" rel="noopener">MySQL Workbench</a>。</p><p>MySQL Workbench可以用可视化的方式查询、创建和修改数据库表，但是，归根到底，MySQL Workbench是一个图形客户端，它对MySQL的操作仍然是发送SQL语句并执行。因此，本质上，MySQL Workbench和MySQL Client命令行都是客户端，和MySQL交互，唯一的接口就是SQL。</p><p>因此，MySQL提供了大量的SQL语句用于管理。虽然可以使用MySQL Workbench图形界面来直接管理MySQL，但是，很多时候，通过SSH远程连接时，只能使用SQL命令，所以，了解并掌握常用的SQL管理操作是必须的。</p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>在一个运行MySQL的服务器上，实际上可以创建多个数据库（Database）。要列出所有数据库，使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW DATABASES;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| shici              |</span><br><span class="line">| sys                |</span><br><span class="line">| test               |</span><br><span class="line">| school             |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure><p>其中，<code>information_schema</code>、<code>mysql</code>、<code>performance_schema</code>和<code>sys</code>是系统库，不要去改动它们。其他的是用户创建的数据库。</p><p>要创建一个新数据库，使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE DATABASE test;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br></pre></td></tr></table></figure><p>要删除一个数据库，使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DROP DATABASE test;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure><p>注意：删除一个数据库将导致该数据库的所有表全部被删除。</p><p>对一个数据库进行操作时，要首先将其切换为当前数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; USE test;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure><h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><p>列出当前数据库的所有表，使用命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW TABLES;</span><br><span class="line">+<span class="comment">---------------------+</span></span><br><span class="line">| Tables_in_test      |</span><br><span class="line">+<span class="comment">---------------------+</span></span><br><span class="line">| classes             |</span><br><span class="line">| statistics          |</span><br><span class="line">| students            |</span><br><span class="line">| students_of_class1  |</span><br><span class="line">+<span class="comment">---------------------+</span></span><br></pre></td></tr></table></figure><p>要查看一个表的结构，使用命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DESC students;</span><br><span class="line">+<span class="comment">----------+--------------+------+-----+---------+----------------+</span></span><br><span class="line">| Field    | Type         | Null | Key | Default | Extra          |</span><br><span class="line">+<span class="comment">----------+--------------+------+-----+---------+----------------+</span></span><br><span class="line">| id       | bigint(20)   | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| class_id | bigint(20)   | NO   |     | NULL    |                |</span><br><span class="line">| name     | varchar(100) | NO   |     | NULL    |                |</span><br><span class="line">| gender   | varchar(1)   | NO   |     | NULL    |                |</span><br><span class="line">| score    | int(11)      | NO   |     | NULL    |                |</span><br><span class="line">+<span class="comment">----------+--------------+------+-----+---------+----------------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>还可以使用以下命令查看创建表的SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW CREATE TABLE students;</span><br><span class="line">+<span class="comment">----------+-------------------------------------------------------+</span></span><br><span class="line">| students | <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`students`</span> (                             |</span><br><span class="line">|          |   <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,            |</span><br><span class="line">|          |   <span class="string">`class_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,                     |</span><br><span class="line">|          |   <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,                       |</span><br><span class="line">|          |   <span class="string">`gender`</span> <span class="built_in">varchar</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,                       |</span><br><span class="line">|          |   <span class="string">`score`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,                           |</span><br><span class="line">|          |   PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)                                  |</span><br><span class="line">|          | ) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 |</span><br><span class="line">+<span class="comment">----------+-------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>创建表使用<code>CREATE TABLE</code>语句，而删除表使用<code>DROP TABLE</code>语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DROP TABLE students;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure><p>修改表就比较复杂。如果要给<code>students</code>表新增一列<code>birth</code>，使用：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> birth <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>要修改<code>birth</code>列，例如把列名改为<code>birthday</code>，类型改为<code>VARCHAR(20)</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students <span class="keyword">CHANGE</span> <span class="keyword">COLUMN</span> birth birthday <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>要删除列，使用：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> birthday;</span><br></pre></td></tr></table></figure><h3 id="退出MySQL"><a href="#退出MySQL" class="headerlink" title="退出MySQL"></a>退出MySQL</h3><p>使用<code>EXIT</code>命令退出MySQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; EXIT</span><br><span class="line">Bye</span><br></pre></td></tr></table></figure><p>注意<code>EXIT</code>仅仅断开了客户端和服务器的连接，MySQL服务器仍然继续运行。</p><h2 id="实用SQL语句"><a href="#实用SQL语句" class="headerlink" title="实用SQL语句"></a>实用SQL语句</h2><p>在编写SQL时，灵活运用一些技巧，可以大大简化程序逻辑。</p><h3 id="插入或替换"><a href="#插入或替换" class="headerlink" title="插入或替换"></a>插入或替换</h3><p>如果我们希望插入一条新记录（INSERT），但如果记录已经存在，就先删除原记录，再插入新记录。此时，可以使用<code>REPLACE</code>语句，这样就不必先查询，再决定是否先删除再插入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REPLACE</span> <span class="keyword">INTO</span> students (<span class="keyword">id</span>, class_id, <span class="keyword">name</span>, gender, score) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">'小明'</span>, <span class="string">'F'</span>, <span class="number">99</span>);</span><br></pre></td></tr></table></figure><p>若<code>id=1</code>的记录不存在，<code>REPLACE</code>语句将插入新记录，否则，当前<code>id=1</code>的记录将被删除，然后再插入新记录。</p><h3 id="插入或更新"><a href="#插入或更新" class="headerlink" title="插入或更新"></a>插入或更新</h3><p>如果我们希望插入一条新记录（INSERT），但如果记录已经存在，就更新该记录，此时，可以使用<code>INSERT INTO ... ON DUPLICATE KEY UPDATE ...</code>语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (<span class="keyword">id</span>, class_id, <span class="keyword">name</span>, gender, score) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">'小明'</span>, <span class="string">'F'</span>, <span class="number">99</span>) <span class="keyword">ON</span> <span class="keyword">DUPLICATE</span> <span class="keyword">KEY</span> <span class="keyword">UPDATE</span> <span class="keyword">name</span>=<span class="string">'小明'</span>, gender=<span class="string">'F'</span>, score=<span class="number">99</span>;</span><br></pre></td></tr></table></figure><p>若<code>id=1</code>的记录不存在，<code>INSERT</code>语句将插入新记录，否则，当前<code>id=1</code>的记录将被更新，更新的字段由<code>UPDATE</code>指定。</p><h3 id="插入或忽略"><a href="#插入或忽略" class="headerlink" title="插入或忽略"></a>插入或忽略</h3><p>如果我们希望插入一条新记录（INSERT），但如果记录已经存在，就啥事也不干直接忽略，此时，可以使用<code>INSERT IGNORE INTO ...</code>语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">IGNORE</span> <span class="keyword">INTO</span> students (<span class="keyword">id</span>, class_id, <span class="keyword">name</span>, gender, score) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">'小明'</span>, <span class="string">'F'</span>, <span class="number">99</span>);</span><br></pre></td></tr></table></figure><p>若<code>id=1</code>的记录不存在，<code>INSERT</code>语句将插入新记录，否则，不执行任何操作。</p><h3 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h3><p>如果想要对一个表进行快照，即复制一份当前表的数据到一个新表，可以结合<code>CREATE TABLE</code>和<code>SELECT</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 对class_id=1的记录进行快照，并存储为新表students_of_class1:</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> students_of_class1 <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> class_id=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>新创建的表结构和<code>SELECT</code>使用的表结构完全一致。</p><h3 id="写入查询结果集"><a href="#写入查询结果集" class="headerlink" title="写入查询结果集"></a>写入查询结果集</h3><p>如果查询结果集需要写入到表中，可以结合<code>INSERT</code>和<code>SELECT</code>，将<code>SELECT</code>语句的结果集直接插入到指定表中。</p><p>例如，创建一个统计成绩的表<code>statistics</code>，记录各班的平均成绩：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">statistics</span> (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    class_id <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    average <span class="keyword">DOUBLE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>然后，我们就可以用一条语句写入各班的平均成绩：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">statistics</span> (class_id, average) <span class="keyword">SELECT</span> class_id, <span class="keyword">AVG</span>(score) <span class="keyword">FROM</span> students <span class="keyword">GROUP</span> <span class="keyword">BY</span> class_id;</span><br></pre></td></tr></table></figure><p>确保<code>INSERT</code>语句的列和<code>SELECT</code>语句的列能一一对应，就可以在<code>statistics</code>表中直接保存查询的结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; select * from statistics;</span><br><span class="line">+<span class="comment">----+----------+--------------+</span></span><br><span class="line">| id | class_id | average      |</span><br><span class="line">+<span class="comment">----+----------+--------------+</span></span><br><span class="line">|  1 |        1 |         86.5 |</span><br><span class="line">|  2 |        2 | 73.666666666 |</span><br><span class="line">|  3 |        3 | 88.333333333 |</span><br><span class="line">+<span class="comment">----+----------+--------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>在执行SQL语句的时候，某些业务要求，一系列操作必须全部执行，而不能仅执行一部分。例如，一个转账操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 从id=1的账户给id=2的账户转账100元</span><br><span class="line">-- 第一步：将id=1的A账户余额减去100</span><br><span class="line">UPDATE accounts SET balance = balance - 100 WHERE id = 1;</span><br><span class="line">-- 第二步：将id=2的B账户余额加上100</span><br><span class="line">UPDATE accounts SET balance = balance + 100 WHERE id = 2;</span><br></pre></td></tr></table></figure><p>这两条SQL语句必须全部执行，或者，由于某些原因，如果第一条语句成功，第二条语句失败，就必须全部撤销。</p><p>这种把多条语句作为一个整体进行操作的功能，被称为数据库<em>事务</em>。数据库事务可以确保该事务范围内的所有操作都可以全部成功或者全部失败。如果事务失败，那么效果就和没有执行这些SQL一样，不会对数据库数据有任何改动。</p><p>可见，数据库事务具有ACID这4个特性：</p><ul><li>A：Atomic，原子性，将所有SQL作为原子工作单元执行，要么全部执行，要么全部不执行；</li><li>C：Consistent，一致性，事务完成后，所有数据的状态都是一致的，即A账户只要减去了100，B账户则必定加上了100；</li><li>I：Isolation，隔离性，如果有多个事务并发执行，每个事务作出的修改必须与其他事务隔离；</li><li>D：Duration，持久性，即事务完成后，对数据库数据的修改被持久化存储。</li></ul><p>对于单条SQL语句，数据库系统自动将其作为一个事务执行，这种事务被称为<em>隐式事务</em>。</p><p>要手动把多条SQL语句作为一个事务执行，使用<code>BEGIN</code>开启一个事务，使用<code>COMMIT</code>提交一个事务，这种事务被称为<em>显式事务</em>，例如，把上述的转账操作作为一个显式事务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BEGIN;</span><br><span class="line">UPDATE accounts SET balance = balance - 100 WHERE id = 1;</span><br><span class="line">UPDATE accounts SET balance = balance + 100 WHERE id = 2;</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><p>很显然多条SQL语句要想作为一个事务执行，就必须使用显式事务。</p><p><code>COMMIT</code>是指提交事务，即试图把事务内的所有SQL所做的修改永久保存。如果<code>COMMIT</code>语句执行失败了，整个事务也会失败。</p><p>有些时候，我们希望主动让事务失败，这时，可以用<code>ROLLBACK</code>回滚事务，整个事务会失败：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BEGIN;</span><br><span class="line">UPDATE accounts SET balance = balance - 100 WHERE id = 1;</span><br><span class="line">UPDATE accounts SET balance = balance + 100 WHERE id = 2;</span><br><span class="line">ROLLBACK;</span><br></pre></td></tr></table></figure><p>数据库事务是由数据库系统保证的，我们只需要根据业务逻辑使用它就可以。</p><h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><p>对于两个并发执行的事务，如果涉及到操作同一条记录的时候，可能会发生问题。因为并发操作会带来数据的不一致性，包括脏读、不可重复读、幻读等。数据库系统提供了隔离级别来让我们有针对性地选择事务的隔离级别，避免数据不一致的问题。</p><p>SQL标准定义了4种隔离级别，分别对应可能出现的数据不一致的情况：</p><table><thead><tr><th>Isolation Level</th><th>脏读（Dirty Read）</th><th>不可重复读（Non Repeatable Read）</th><th>幻读（Phantom Read）</th></tr></thead><tbody><tr><td>Read Uncommitted</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>Read Committed</td><td>-</td><td>Yes</td><td>Yes</td></tr><tr><td>Repeatable Read</td><td>-</td><td>-</td><td>Yes</td></tr><tr><td>Serializable</td><td>-</td><td>-</td><td>-</td></tr></tbody></table><p>一般的InnoDB默认采用的是Repeatable Read 这个级别，该级别的特点是<strong>同一个事务内的查询都是与事务开始时刻一致</strong>，虽然Serializable隔离级别下的事务具有最高的安全性，但是，由于事务是串行执行，所以效率会大大下降，应用程序的性能会急剧降低。如果没有特别重要的情景，一般都不会使用Serializable隔离级别。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;索引&quot;&gt;&lt;a href=&quot;#索引&quot; class=&quot;headerlink&quot; title=&quot;索引&quot;&gt;&lt;/a&gt;索引&lt;/h3&gt;&lt;p&gt;索引是关系数据库中对某一列或多个列的值进行预排序的数据结构。通过使用索引，可以让数据库系统不必扫描整个表，而是直接定位到符合条件的记录，这样就大大加快了查询速度。&lt;/p&gt;
&lt;p&gt;例如，对于&lt;code&gt;students&lt;/code&gt;表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;class_id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;gender&lt;/th&gt;
&lt;th&gt;score&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;小明&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;90&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;小红&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;95&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;小军&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;88&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;如果要经常根据&lt;code&gt;score&lt;/code&gt;列进行查询，就可以对&lt;code&gt;score&lt;/code&gt;列创建索引：&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="https://onceonmydoor.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>各种排序算法Python实现</title>
    <link href="https://onceonmydoor.github.io/2019/01/14/%E5%90%84%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95Python%E5%AE%9E%E7%8E%B0/"/>
    <id>https://onceonmydoor.github.io/2019/01/14/各种排序算法Python实现/</id>
    <published>2019-01-14T06:12:42.000Z</published>
    <updated>2019-01-14T06:32:01.465Z</updated>
    
    <content type="html"><![CDATA[<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p><strong>不变性</strong>：经过n论交换后，最大的k个元素必然就位，也就是说外层循环是n</p><p><strong>单调性：</strong> 经n轮扫描后，问题的规模缩减n-k</p><a id="more"></a><p><img src="/img/冒泡排序.png" alt="冒泡排序"></p><h4 id="冒泡排序代码实现"><a href="#冒泡排序代码实现" class="headerlink" title="冒泡排序代码实现"></a>冒泡排序代码实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubbleSort</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="string">"""冒泡排序</span></span><br><span class="line"><span class="string">         时间复杂度</span></span><br><span class="line"><span class="string">        *最优时间复杂度：O(n) （表示遍历一次发现没有任何可以交换的元素，排序结束。）</span></span><br><span class="line"><span class="string">        *最坏时间复杂度：O(n2)</span></span><br><span class="line"><span class="string">        *稳定性：稳定</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment">#此为优化版本加了count的计数</span></span><br><span class="line">    print(len(list))</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list)<span class="number">-1</span>):</span><br><span class="line">        <span class="comment">#range()函数取从0开始到n-1的数</span></span><br><span class="line">        <span class="comment">#也就是说range(5)=[0,1,2,3,4],数组长度是8，但是游标只需要动7次所有是rang(7)</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(list)<span class="number">-1</span>-i):</span><br><span class="line">            <span class="keyword">if</span> list[j]&gt;list[j+<span class="number">1</span>]:</span><br><span class="line">                <span class="comment">#如果前面的数字大于后面的数字就交换</span></span><br><span class="line">                <span class="comment">#升序排列</span></span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                list[j],list[j+<span class="number">1</span>]=list[j+<span class="number">1</span>],list[j]</span><br><span class="line">        <span class="keyword">if</span> count == <span class="number">0</span>:</span><br><span class="line">            <span class="comment">#优化冒泡排序，每次遍历完成后，如果没有交换的，便可以直接返回</span></span><br><span class="line">            <span class="comment">#此时最优时间复杂度是O（N）</span></span><br><span class="line">            <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h4 id="选择排序代码实现"><a href="#选择排序代码实现" class="headerlink" title="选择排序代码实现"></a>选择排序代码实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectSort</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="string">"""选择排序</span></span><br><span class="line"><span class="string">    时间复杂度</span></span><br><span class="line"><span class="string">    *  最优时间复杂度：O(n2)</span></span><br><span class="line"><span class="string">    *  最坏时间复杂度：O(n2)</span></span><br><span class="line"><span class="string">    *  稳定性：不稳定（考虑升序每次选择最大的情况）</span></span><br><span class="line"><span class="string">    无法优化</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># list = [1,2       ,35,543,62,52,63]</span></span><br><span class="line">    <span class="comment">#         0 1        2   3   4  5  6</span></span><br><span class="line">    <span class="comment">#                              n-2      n=7</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(list) - <span class="number">1</span>):</span><br><span class="line">        <span class="comment">#外层循环j=[0,1,2,...,n-2]</span></span><br><span class="line">        <span class="comment">#每次外循环就将一个最小的数移到前面</span></span><br><span class="line">        <span class="comment">#就是说外层循环数=前面有序的数</span></span><br><span class="line">        min = j</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(j+<span class="number">1</span>,len(list)):</span><br><span class="line">        <span class="comment">#用来寻找后半部分的最小值（的索引）</span></span><br><span class="line">            <span class="keyword">if</span> list[min]&gt;list[i]:</span><br><span class="line">                min = i</span><br><span class="line">        <span class="comment">#找到了最小值就进行交换</span></span><br><span class="line">        list[min], list[j] = list[j], list[min]</span><br></pre></td></tr></table></figure><p>选择排序和冒泡排序的区别</p><p>选择排序是选出最大，或最小的放入指定位置，选择排序不稳定，选出的数可能在相同大小数的前面，最后却先进入有序状态</p><p>冒泡是互相比较，选出最大或最小，冒泡排序是稳定的，选出来的数没有比下一个大就不会交换位置</p><h4 id="插入排序代码实现"><a href="#插入排序代码实现" class="headerlink" title="插入排序代码实现"></a>插入排序代码实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">InsertionSort</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    插入排序</span></span><br><span class="line"><span class="string">    :param list:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># for i in range(1,len(list)):</span></span><br><span class="line">    <span class="comment">#     temp = list[i]</span></span><br><span class="line">    <span class="comment">#     for j in range(i):</span></span><br><span class="line">    <span class="comment">#         if list[j]&gt;list[i]:</span></span><br><span class="line">    <span class="comment">#            for k in range(i,j,-1):</span></span><br><span class="line">    <span class="comment">#                list[k] = list[k-1]</span></span><br><span class="line">    <span class="comment">#            list[j]=temp</span></span><br><span class="line">    <span class="comment">#         break</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">1</span>,len(list)):</span><br><span class="line">        <span class="comment"># i 从第二个数开始比较，首先把第一个数当成是有序的</span></span><br><span class="line">            <span class="keyword">while</span> i&gt;<span class="number">0</span>:</span><br><span class="line">                <span class="comment">#第i 个数与之前的一位数做比较，如果小就交换，并继续比较</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> list [i]&lt;list[i<span class="number">-1</span>]:</span><br><span class="line">                    list[i],list[i<span class="number">-1</span>] = list[i<span class="number">-1</span>],list[i]</span><br><span class="line">                    i -=<span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment">#如果之前的数更小就不动</span></span><br><span class="line">                <span class="comment">#这里采取的思想是，省下与本来就比自己小的数之间的比较</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="comment">#这个break可以将本来有序的排列的时间复杂度变成O（N）</span></span><br><span class="line">                <span class="comment">#如果大就可以直接退出循环</span></span><br></pre></td></tr></table></figure><h4 id="希尔排序的代码实现"><a href="#希尔排序的代码实现" class="headerlink" title="希尔排序的代码实现"></a>希尔排序的代码实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ShellSort</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="string">"""希尔排序</span></span><br><span class="line"><span class="string">        最优时间复杂度：根据步长序列的不同而不同</span></span><br><span class="line"><span class="string">        最坏时间复杂度：O(n2)</span></span><br><span class="line"><span class="string">        稳定想：不稳定</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    n = len(list)</span><br><span class="line">    gap = n//<span class="number">2</span> <span class="comment">#python3中//指取整数</span></span><br><span class="line">    i=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (gap&gt;<span class="number">0</span>):</span><br><span class="line">        <span class="comment">#gap需要不断缩短</span></span><br><span class="line">        <span class="comment">#gap =1 就是普通的插入排序</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(gap,n):</span><br><span class="line">            i=j</span><br><span class="line">            <span class="keyword">while</span> i&gt;<span class="number">0</span>:</span><br><span class="line">                <span class="comment">#基础插入算法，只不过是与前gap个数交换</span></span><br><span class="line">                <span class="keyword">if</span> list[i]&lt;list[i-gap]:</span><br><span class="line">                    list[i],list[i-gap]=list[i-gap],list[i]</span><br><span class="line">                    i -=gap</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                    <span class="comment">#不交换</span></span><br><span class="line">        gap //=<span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="快速排序代码实现（比较重要）"><a href="#快速排序代码实现（比较重要）" class="headerlink" title="快速排序代码实现（比较重要）"></a>快速排序代码实现（比较重要）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quickSort</span><span class="params">(list,start,end)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    快速排序</span></span><br><span class="line"><span class="string">    最优时间复杂度：O(nlogn)</span></span><br><span class="line"><span class="string">    分半拆分</span></span><br><span class="line"><span class="string">    最坏时间复杂度：O(n2)</span></span><br><span class="line"><span class="string">    稳定性：不稳定</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment">#判断退出，考虑所有情况，</span></span><br><span class="line">    <span class="keyword">if</span> start &gt;= end:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        mid_value = list[start]</span><br><span class="line">        low = start</span><br><span class="line">        high = end</span><br><span class="line">        <span class="keyword">while</span> low&lt;high:</span><br><span class="line">            <span class="keyword">while</span> low &lt; high <span class="keyword">and</span> list[high]&gt;=mid_value:</span><br><span class="line">                <span class="comment">#high左移</span></span><br><span class="line">                <span class="comment">#所有相等的数都会移到一边</span></span><br><span class="line">                high -= <span class="number">1</span></span><br><span class="line">            list[low]=list[high]</span><br><span class="line">            <span class="comment"># low += 1</span></span><br><span class="line">            <span class="keyword">while</span> low &lt; high <span class="keyword">and</span> list[low]&lt;mid_value:</span><br><span class="line">                low += <span class="number">1</span></span><br><span class="line">            list[high]=list[low]</span><br><span class="line">            <span class="comment"># high -=1</span></span><br><span class="line">        <span class="comment">#从循环退出，Low == high</span></span><br><span class="line">        list[low] =mid_value</span><br><span class="line">        <span class="comment">#递归</span></span><br><span class="line">        <span class="comment">#左侧递归</span></span><br><span class="line">        quickSort(list,start,low<span class="number">-1</span>)</span><br><span class="line">        <span class="comment">#右侧递归</span></span><br><span class="line">        quickSort(list,low+<span class="number">1</span>,end)</span><br></pre></td></tr></table></figure><h4 id="归并排序的代码实现"><a href="#归并排序的代码实现" class="headerlink" title="归并排序的代码实现"></a>归并排序的代码实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeSort</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    归并排序</span></span><br><span class="line"><span class="string">    最优时间复杂度：O(nlogn)</span></span><br><span class="line"><span class="string">    最坏时间复杂度：O(nlogn)</span></span><br><span class="line"><span class="string">    稳定性：稳定</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(list) &lt;=<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> list</span><br><span class="line">        <span class="comment">#递归结束判定，知道只剩下一个</span></span><br><span class="line">    mid = len(list)//<span class="number">2</span></span><br><span class="line">    left_li =mergeSort(list[:mid])</span><br><span class="line">    right_li =mergeSort(list[mid:])</span><br><span class="line">    <span class="comment">#left和right指的是采用归并排序之后，有序的列表</span></span><br><span class="line">    <span class="comment">#可以用切片，因为可以重新生成数列</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#接下来对有序的列表进行合并</span></span><br><span class="line">    left_pter,right_pter =<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">while</span> left_pter&lt;len(left_li) <span class="keyword">and</span> right_pter&lt;len(right_li):</span><br><span class="line">        <span class="comment">#循环比较，当指向大于列表长度时候退出</span></span><br><span class="line">         <span class="keyword">if</span> left_li[left_pter] &lt;=right_li[right_pter]:</span><br><span class="line">            <span class="comment">#小于等于，在等于情况下，优先排列左边的数，保证其稳定性</span></span><br><span class="line">            result.append(left_li[left_pter])</span><br><span class="line">            <span class="comment">#向新的数组中加入小的那个数</span></span><br><span class="line">            left_pter += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(right_li[right_pter])</span><br><span class="line">            right_pter += <span class="number">1</span></span><br><span class="line">    <span class="comment">#当一部分指针已经超过某个部分的长度，就直接添加，因为一般情况只会有一个数</span></span><br><span class="line">    result += left_li[left_pter:]</span><br><span class="line">    <span class="comment">#如果是空列表也能添加</span></span><br><span class="line">    result += right_li[right_pter:]</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h4 id="常见排序算法效率比较"><a href="#常见排序算法效率比较" class="headerlink" title="常见排序算法效率比较"></a>常见排序算法效率比较</h4><p><img src="/img/排序比较.png" alt="算法效率比较"></p><p><img src="file:///C:/Users/dell.DESKTOP-FM0VES7/Desktop/python%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/images/%E6%8E%92%E5%BA%8F%E6%AF%94%E8%BE%83.jpg" alt="排序比较"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;不变性&lt;/strong&gt;：经过n论交换后，最大的k个元素必然就位，也就是说外层循环是n&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;单调性：&lt;/strong&gt; 经n轮扫描后，问题的规模缩减n-k&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://onceonmydoor.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python单元测试unittest</title>
    <link href="https://onceonmydoor.github.io/2018/11/05/Python%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95unittest/"/>
    <id>https://onceonmydoor.github.io/2018/11/05/Python单元测试unittest/</id>
    <published>2018-11-05T11:57:12.000Z</published>
    <updated>2018-12-22T14:35:55.961Z</updated>
    
    <content type="html"><![CDATA[<p>Python中有一个自带的单元测试框架是unittest模块，用它来做单元测试，它里面封装好了一些校验返回的结果方法和一些用例执行前的初始化操作。</p><p>在说unittest之前，先说几个概念：</p><p>TestCase 也就是测试用例</p><p>TestSuite 多个测试用例集合在一起，就是TestSuite</p><p>TestLoader是用来加载TestCase到TestSuite中的</p><p>TestRunner是来执行测试用例的,测试的结果会保存到TestResult实例中，包括运行了多少测试用例，成功了多少，失败了多少等信息</p><p>下面写一个简单的单元测试用例<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTest</span><span class="params">(unittest.TestCase)</span>:</span>  <span class="comment"># 继承unittest.TestCase</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 每个测试用例执行之后做操作</span></span><br><span class="line">        print(<span class="string">'111'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 每个测试用例执行之前做操作</span></span><br><span class="line">        print(<span class="string">'22222'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDownClass</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 必须使用 @ classmethod装饰器, 所有test运行完后运行一次</span></span><br><span class="line">         print(<span class="string">'4444444'</span>)</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUpClass</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 必须使用@classmethod 装饰器,所有test运行前运行一次</span></span><br><span class="line">        print(<span class="string">'33333'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_a_run</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.assertEqual(<span class="number">1</span>, <span class="number">1</span>)  <span class="comment"># 测试用例</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_b_run</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.assertEqual(<span class="number">2</span>, <span class="number">2</span>)  <span class="comment"># 测试用例</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()<span class="comment">#运行所有的测试用例</span></span><br></pre></td></tr></table></figure></p><p>那如何生成一个测试报告呢，需要加入另外一个模块了，HTMLTestRunner，这个模块需要自己安装，使用执行测试用例就会生成一个html的测试报告，里面会有每个测试用例的执行结果，代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> HTMLTestRunner        </span><br><span class="line">        <span class="keyword">import</span> unittest</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span><span class="params">(unittest.TestCase)</span>:</span><span class="comment">#继承unittest.TestCase</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span><span class="params">(self)</span>:</span></span><br><span class="line">                <span class="comment">#每个测试用例执行之后做操作</span></span><br><span class="line">                print(<span class="string">'111'</span>)</span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">                <span class="comment">#每个测试用例执行之前做操作</span></span><br><span class="line">                print(<span class="number">22222</span>)</span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">test_run</span><span class="params">(self)</span>:</span></span><br><span class="line">                <span class="comment"># self.assertEqual(1,1)</span></span><br><span class="line">                self.assertIs(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">                <span class="comment">#测试用例</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">test_run2</span><span class="params">(self)</span>:</span></span><br><span class="line">                <span class="comment"># self.assertEqual(1,1)</span></span><br><span class="line">                self.assertIs(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">                <span class="comment">#测试用例</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">test_run3</span><span class="params">(self)</span>:</span></span><br><span class="line">                <span class="comment"># self.assertEqual(1,1)</span></span><br><span class="line">                self.assertIs(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">                <span class="comment">#测试用例</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">test_run1</span><span class="params">(self)</span>:</span></span><br><span class="line">                <span class="comment"># self.assertEqual(1,1)</span></span><br><span class="line">                self.assertIs(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">                <span class="comment">#测试用例</span></span><br><span class="line">        <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">            test_suite = unittest.TestSuite()<span class="comment">#创建一个测试集合</span></span><br><span class="line">            test_suite.addTest(MyTest(<span class="string">'test_run1'</span>))<span class="comment">#测试套件中添加测试用例</span></span><br><span class="line">            <span class="comment">#test_suite.addTest(unittest.makeSuite(MyTest))#使用makeSuite方法添加所有的测试方法</span></span><br><span class="line">            fp = open(<span class="string">'res.html'</span>,<span class="string">'wb'</span>)<span class="comment">#打开一个保存结果的html文件</span></span><br><span class="line">            runner = HTMLTestRunner.HTMLTestRunner(stream=fp,title=<span class="string">'api测试报告'</span>,description=<span class="string">'测试情况'</span>)</span><br><span class="line">            <span class="comment">#生成执行用例的对象</span></span><br><span class="line">            runner.run(test_suite)</span><br><span class="line">            <span class="comment">#执行测试套件</span></span><br></pre></td></tr></table></figure></p><p>我们在后续进行持续集成的时候，要让代码自动运行，就会用到Jenkins了，但是上面产生的测试报告都是html格式的，Jenkins不认识，就在Jenkins里面显示不出来。那咱们就要产生一些Jenkins认识的测试报告，Jenkins认识xml格式的报告，那咱们就产生xml格式的呗，就需要用一个新的模块，xmlrunner，安装直接 pip install xmlrunner即可，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> xmlrunner</span><br><span class="line"><span class="comment">#导入这个模块</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">My</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">(self,a,b,c)</span>:</span></span><br><span class="line">        self.assertEqual(a+b,c)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    test_suite = unittest.TestSuite()</span><br><span class="line">    test_suite.addTest(unittest.makeSuite(My))</span><br><span class="line">    runner = xmlrunner.XMLTestRunner(output=<span class="string">'report'</span>)<span class="comment">#指定报告放的目录</span></span><br><span class="line">    runner.run(test_suite)</span><br></pre></td></tr></table></figure><p>然后就运行，可以看到在report目录下已经产生了xml格式的报告了，而且还自动把日期加上了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python中有一个自带的单元测试框架是unittest模块，用它来做单元测试，它里面封装好了一些校验返回的结果方法和一些用例执行前的初始化操作。&lt;/p&gt;
&lt;p&gt;在说unittest之前，先说几个概念：&lt;/p&gt;
&lt;p&gt;TestCase 也就是测试用例&lt;/p&gt;
&lt;p&gt;TestSuite 多个测试用例集合在一起，就是TestSuite&lt;/p&gt;
&lt;p&gt;TestLoader是用来加载TestCase到TestSuite中的&lt;/p&gt;
&lt;p&gt;TestRunner是来执行测试用例的,测试的结果会保存到TestResult实例中，包括运行了多少测试用例，成功了多少，失败了多少等信息&lt;/p&gt;
&lt;p&gt;下面写一个简单的单元测试用例&lt;br&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://onceonmydoor.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>redis数据库</title>
    <link href="https://onceonmydoor.github.io/2018/09/13/redis%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://onceonmydoor.github.io/2018/09/13/redis数据库/</id>
    <published>2018-09-13T15:13:00.000Z</published>
    <updated>2018-11-05T11:58:04.309Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><ul><li><p><strong>添加</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> [name] [参数]</span><br><span class="line">如：</span><br><span class="line"><span class="built_in">set</span> username abc</span><br></pre></td></tr></table></figure></li><li><p><strong>删除</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">del</span> key</span><br><span class="line">如：</span><br><span class="line"><span class="built_in">del</span> username</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li><p><strong>设置过期时间</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">expire key timeout(单位为秒)</span><br><span class="line">或在设置值的时候：</span><br><span class="line"><span class="built_in">set</span> key value EX timeout</span><br><span class="line">setex key <span class="built_in">time</span> value</span><br><span class="line">如：<span class="built_in">set</span> age <span class="number">19</span> EX <span class="number">60</span></span><br></pre></td></tr></table></figure></li><li><p><strong>查看过期时间</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ttl key</span><br></pre></td></tr></table></figure></li><li><p><strong>查看所有的key</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keys *</span><br></pre></td></tr></table></figure></li><li><p><strong>从左侧添加元素</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lpush key value</span><br></pre></td></tr></table></figure></li><li><p><strong>从右侧添加元素</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpush key value</span><br></pre></td></tr></table></figure></li><li><p><strong>查看列表中的元素</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lrange key <span class="built_in">start</span> stop</span><br><span class="line">如:</span><br><span class="line">lrange websites <span class="number">0</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p><strong>移除列表中的元素</strong></p><blockquote>   <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;移除并返回列表的头元素</span><br><span class="line">&gt;    lpop key</span><br><span class="line">&gt;移除并返回列表的尾元素</span><br><span class="line">&gt;    rpop key</span><br><span class="line">&gt;移除并返回列表中的中间元素：</span><br><span class="line">&gt;    lren key count value</span><br><span class="line">&gt;将count个值 个value去掉 count=<span class="number">0</span>时指所有，count&lt;<span class="number">0</span>时从表尾开始向表头搜索</span><br><span class="line">&gt;count&gt;<span class="number">0</span>时从表头开始向表尾搜索</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p><strong>获取第几个元素的值</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lindex key index</span><br></pre></td></tr></table></figure></li><li><p><strong>总共有几个元素</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">llen key</span><br></pre></td></tr></table></figure></li><li><p><strong>set 集合的操作</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">添加元素:</span><br><span class="line">sadd <span class="built_in">set</span> value1 valeu2</span><br><span class="line">查看元素：</span><br><span class="line">smembers <span class="built_in">set</span></span><br><span class="line">移除元素：</span><br><span class="line">sren <span class="built_in">set</span> member(因为集合是无序的所以只能指定)</span><br></pre></td></tr></table></figure></li><li><p><strong>集合的交并补运算</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">交集：</span><br><span class="line">siner set1 set2</span><br><span class="line">并集：</span><br><span class="line">sunion set1 set2</span><br><span class="line">差集：</span><br><span class="line">sdiff set1 set2</span><br><span class="line">**set1中set2没有的 即：set1减set2**</span><br></pre></td></tr></table></figure></li><li><p><strong>hash 哈希操作</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">添加新值:</span><br><span class="line">hset key field value </span><br><span class="line">field 和value为一对一关系</span><br><span class="line">获取对应的值:</span><br><span class="line">hget key field</span><br><span class="line">删除field中的某个field“</span><br><span class="line">hdel key field</span><br><span class="line">获取某个哈希中的所有值</span><br><span class="line">hgetall key</span><br><span class="line">所有value</span><br><span class="line">hvals key</span><br><span class="line">所有key </span><br><span class="line">hkeys key</span><br><span class="line">判断是否存在:</span><br><span class="line">hexists key field</span><br><span class="line">获取哈希中的键值对(数量):</span><br><span class="line">hlen field</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;字符串操作&quot;&gt;&lt;a href=&quot;#字符串操作&quot; class=&quot;headerlink&quot; title=&quot;字符串操作&quot;&gt;&lt;/a&gt;字符串操作&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;添加&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight cmd&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; [name] [参数]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; username abc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;删除&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight cmd&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;del&lt;/span&gt; key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;del&lt;/span&gt; username&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Photo3</title>
    <link href="https://onceonmydoor.github.io/2018/08/27/photo3/"/>
    <id>https://onceonmydoor.github.io/2018/08/27/photo3/</id>
    <published>2018-08-27T15:42:40.000Z</published>
    <updated>2018-12-22T15:06:18.493Z</updated>
    
    <content type="html"><![CDATA[<h3 id="活着"><a href="#活着" class="headerlink" title="活着"></a>活着</h3><p><img src="/img/5.jpeg" alt="测试测试"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;活着&quot;&gt;&lt;a href=&quot;#活着&quot; class=&quot;headerlink&quot; title=&quot;活着&quot;&gt;&lt;/a&gt;活着&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/img/5.jpeg&quot; alt=&quot;测试测试&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="图片" scheme="https://onceonmydoor.github.io/tags/%E5%9B%BE%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy笔记</title>
    <link href="https://onceonmydoor.github.io/2018/08/19/Scrapy%E7%AC%94%E8%AE%B0/"/>
    <id>https://onceonmydoor.github.io/2018/08/19/Scrapy笔记/</id>
    <published>2018-08-19T14:04:42.000Z</published>
    <updated>2018-08-28T15:35:57.379Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建爬虫"><a href="#创建爬虫" class="headerlink" title="创建爬虫"></a>创建爬虫</h2><p>1.创建项目：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">‘Scrapy startproject [爬虫的名字]’.</span><br></pre></td></tr></table></figure></p><p>2.创建爬虫：进入到项目所在的路径，执行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">‘Scrapy genspider[爬虫名字][爬虫域名]’</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="项目目录结构："><a href="#项目目录结构：" class="headerlink" title="项目目录结构："></a>项目目录结构：</h2><p><strong>1. items.py</strong>  用来存放爬虫爬取下来的数据模型</p><p><strong>2. middlewares.py</strong> 用来存放各种中间件的文件</p><p><strong>3. pepelines.py</strong>用来将items的模型存储在某个位置</p><p><strong>4. settings.py</strong> 爬虫的一些基本配置信息（比如请求头、多久发送一次请求，ip代理池等）</p><p><strong>5. scrapy.cfg</strong> 项目的配置文件</p><p><strong>6. spider包</strong> 所有的爬虫文件</p><h2 id="案例笔记"><a href="#案例笔记" class="headerlink" title="案例笔记"></a>案例笔记</h2><ol><li><p>response是一个<code>&lt;from scrapy.http.response.html import HtmlResponse&gt;</code>对象。可以执行<strong>xpath</strong>和<strong>css</strong>语法来提取数据</p></li><li><p>提取出来的数据，是一个<strong>Selector</strong>或者是<strong>Selectorlist</strong>对象，可以用<strong>getall</strong>和<strong>get</strong>方法</p></li><li><p>getall： 获取所有文本返回一个列表</p></li><li><p>get: 获取第一个文本，返回的是一个str类型</p></li><li><p>如果要pipeline处理数据 可以以通过<strong>yield</strong>来返回</p></li><li><p>item:定义模型</p></li><li><p>pipeline三个方法:</p><blockquote><p>open_spider(self,spider):当爬虫被打开时执行</p></blockquote></li></ol><blockquote><p>process_item(self, item, spider)：当爬虫有item传进来时执行</p><p>close_spider(self,spider)：关闭时执行</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.fp =open(<span class="string">"duanzi.json"</span>,<span class="string">'w'</span>,encoding=<span class="string">'Utf-8'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self,spider)</span>:</span></span><br><span class="line">    print(<span class="string">'爬虫开始了。。。'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">    item_json =json.dumps(dict(item),ensure_ascii=<span class="keyword">False</span>)</span><br><span class="line">    self.fp.write(item_json+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self,spider)</span>:</span></span><br><span class="line">    self.fp.close()</span><br><span class="line">    print(<span class="string">'爬虫结束了。。。'</span>)</span><br></pre></td></tr></table></figure><p>==<strong>注意：</strong>== 要激活pipline，应该在<code>settings.py</code>中，设置·ITEM_PIPELINES·<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="string">'qsbk.pipelines.QsbkPipeline'</span>: <span class="number">300</span>,</span><br><span class="line">&#125;<span class="comment">#值越小优先级越高，处理时间最早</span></span><br></pre></td></tr></table></figure></p><h2 id="JsonItemExporter-和-JsonLinesItemExporter"><a href="#JsonItemExporter-和-JsonLinesItemExporter" class="headerlink" title="JsonItemExporter 和 JsonLinesItemExporter:"></a>JsonItemExporter 和 JsonLinesItemExporter:</h2><p>保存json数据的时候，可以使用者两个类，让操作变得更简单</p><ol><li><code>JsonItemExporter</code>：将数据添加到内存，最后写入磁盘，存储的数据是一个满足json规则的数据，不好处理大型数据</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.exporters <span class="keyword">import</span> JsonItemExporter</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QsbkPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.fp =open(<span class="string">"duanzi.json"</span>,<span class="string">'wb'</span>)</span><br><span class="line">        <span class="comment">#wb,以二进制打开,写入byte数据类型</span></span><br><span class="line">        self.exporter =JsonItemExporter(self.fp,ensure_ascii=<span class="keyword">False</span>,encoding=<span class="string">'Utf-8'</span>)</span><br><span class="line">        self.exporter.start_exporting()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self,spider)</span>:</span></span><br><span class="line">        print(<span class="string">'爬虫开始了。。。'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        self.exporter.export_item(item)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self,spider)</span>:</span></span><br><span class="line">        self.exporter.finish_exporting()</span><br><span class="line">        <span class="comment">#需要写开始和结束</span></span><br><span class="line">        self.fp.close()</span><br><span class="line">        print(<span class="string">'爬虫结束了。。。'</span>)</span><br></pre></td></tr></table></figure><ol><li><p><code>JsonLinesItemExporter</code>：每次调用<code>exoirt_item</code>把<code>item</code>存到硬盘中<br>不满足Json格式，不消耗内存直接存储硬盘,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.exporters <span class="keyword">import</span> JsonLinesItemExporter</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QsbkPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.fp =open(<span class="string">"duanzi.json"</span>,<span class="string">'wb'</span>)</span><br><span class="line">        <span class="comment">#wb,以二进制打开,写入byte数据类型</span></span><br><span class="line">        self.exporter =JsonLinesItemExporter(self.fp,ensure_ascii=<span class="keyword">False</span>,encoding=<span class="string">'Utf-8'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self,spider)</span>:</span></span><br><span class="line">        print(<span class="string">'爬虫开始了。。。'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        self.exporter.export_item(item)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self,spider)</span>:</span></span><br><span class="line">        <span class="comment">#不需要写开始和结束</span></span><br><span class="line">        self.fp.close()</span><br><span class="line">        print(<span class="string">'爬虫结束了。。。'</span>)</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"><span class="comment">### CrawlSpider:</span></span><br><span class="line">需要用`LinKExtractor`和`RULE`来决定爬虫的走向 </span><br><span class="line">__如__</span><br><span class="line">``````python</span><br><span class="line">rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r'.+mod=list&amp;catid=2&amp;page=\d'</span>), follow=<span class="keyword">True</span>),</span><br><span class="line">        <span class="comment">#如果只想获取url不需要callback回调函数</span></span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r'.+article-.+\.html'</span>),callback=<span class="string">"parse_detail"</span>,follow=<span class="keyword">False</span>)</span><br><span class="line">    )</span><br><span class="line">``````</span><br></pre></td></tr></table></figure></li><li><p><code>allow</code>使用正则表达式</p></li><li><code>follow</code> 在爬取页面时，将当前条件的<code>url</code>跟进，那么就设置为<code>true</code></li><li>如果只想获取<code>url</code>不需要<code>callback</code>回调函数,想要爬取数据则需要设置<code>callback</code>函数</li></ol><h3 id="scrapy-shell"><a href="#scrapy-shell" class="headerlink" title="scrapy shell:"></a>scrapy shell:</h3><p><code>Scrapy shell http://ww使用w.wxapp-union.com/article-4404-1.html</code></p><ol><li>可以方便的测试一些代码<br><img src="/img/5.png" alt="如图"></li></ol><h3 id="实现模拟登陆"><a href="#实现模拟登陆" class="headerlink" title="实现模拟登陆"></a>实现模拟登陆</h3><ol><li>想要发送post请求，就要<code>scrapy.FromRequest</code>方法。便于提交表单</li><li>重写<code>start_requests</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></span><br><span class="line">    url =<span class="string">"http://www.renren.com/PLogin.do"</span></span><br><span class="line">    data =&#123;<span class="string">"email"</span>:<span class="string">"970138074@qq.com"</span>,<span class="string">"password"</span>:<span class="string">"pythonspider"</span>&#125;</span><br><span class="line">    request =scrapy.FormRequest(url,formdata=data,callback=self.parse_page)</span><br><span class="line">    <span class="keyword">yield</span> request</span><br><span class="line">    <span class="comment">#发送post请求并发送</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(self,reponse)</span>:</span></span><br><span class="line">    request = scrapy.Request(url=<span class="string">"http://www.renren.com/880151247/profile"</span>,callback=self.parse_profile)</span><br><span class="line">    <span class="keyword">yield</span> request</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_profile</span><span class="params">(self,response)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'dp.html'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>)<span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(response.text)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;创建爬虫&quot;&gt;&lt;a href=&quot;#创建爬虫&quot; class=&quot;headerlink&quot; title=&quot;创建爬虫&quot;&gt;&lt;/a&gt;创建爬虫&lt;/h2&gt;&lt;p&gt;1.创建项目：&lt;br&gt;&lt;figure class=&quot;highlight cmd&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;‘Scrapy startproject [爬虫的名字]’.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2.创建爬虫：进入到项目所在的路径，执行命令：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;‘Scrapy genspider[爬虫名字][爬虫域名]’&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="https://onceonmydoor.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>selenium+chorchromedriver不得不说的故事</title>
    <link href="https://onceonmydoor.github.io/2018/08/11/selenium-chorchromedriver%E4%B8%8D%E5%BE%97%E4%B8%8D%E8%AF%B4%E7%9A%84%E6%95%85%E4%BA%8B/"/>
    <id>https://onceonmydoor.github.io/2018/08/11/selenium-chorchromedriver不得不说的故事/</id>
    <published>2018-08-11T14:03:41.000Z</published>
    <updated>2018-08-27T15:35:35.927Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用selenium机器人打开网站"><a href="#使用selenium机器人打开网站" class="headerlink" title="使用selenium机器人打开网站"></a>使用selenium机器人打开网站</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver_path =<span class="string">r"C:\Program Files (x86)\Google\Chrome\Application\chromedriver.exe"</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=driver_path)</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">'https://www.baidu.com/'</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="关闭网站"><a href="#关闭网站" class="headerlink" title="关闭网站"></a>关闭网站</h2><p>关闭当前页面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">driver.close()</span><br></pre></td></tr></table></figure><p>退出整个浏览器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h2 id="打印源代码"><a href="#打印源代码" class="headerlink" title="打印源代码"></a>打印源代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">print(driver.page_source)</span><br></pre></td></tr></table></figure><h2 id="多种方法获取标签"><a href="#多种方法获取标签" class="headerlink" title="多种方法获取标签"></a>多种方法获取标签</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">inputTag1 = driver.find_elements_by_id(<span class="string">'kw'</span>)</span><br><span class="line"><span class="comment">#elements 多个元素，是个列表。</span></span><br><span class="line"></span><br><span class="line">inputTag2 = driver.find_element_by_name(<span class="string">'wd'</span>)</span><br><span class="line"></span><br><span class="line">inputTag3 = driver.find_element_by_class_name(<span class="string">'s_ipt'</span>)</span><br><span class="line"></span><br><span class="line">inputTag4 = driver.find_element_by_xpath(<span class="string">"//input[@id='kw']"</span>)</span><br><span class="line"></span><br><span class="line">inputTag5 = driver.find_element_by_css_selector(<span class="string">'.quickdelete-wrap &gt; input'</span>)</span><br><span class="line"></span><br><span class="line">inputTag6 = driver.find_element(By.CSS_SELECTOR,<span class="string">'.quickdelete-wrap &gt; input'</span>)</span><br><span class="line"><span class="comment">#第二种用by的方法</span></span><br><span class="line"></span><br><span class="line">rememberBtn = driver.find_element_by_name(<span class="string">'remember'</span>)</span><br><span class="line"><span class="comment">#记住我的checkbox用法</span></span><br><span class="line"></span><br><span class="line">inputTag1.send_keys(<span class="string">'python'</span>)</span><br><span class="line"><span class="comment">#向文本框输入文本</span></span><br></pre></td></tr></table></figure><p><strong>Select的用法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> Select</span><br><span class="line"></span><br><span class="line">selectBtn = Select(driver.find_element_by_name(<span class="string">'jumpMenu'</span>))</span><br><span class="line"></span><br><span class="line">selectBtn.select_by_index(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#选中第2个</span></span><br><span class="line">selectBtn.select_by_value(<span class="string">"http:xxxx"</span>)</span><br><span class="line"><span class="comment">#直接选中链接</span></span><br><span class="line">selectBtn.select_by_visible_text(<span class="string">"慈溪"</span>)</span><br><span class="line"><span class="comment">#直接选中文本</span></span><br></pre></td></tr></table></figure><h2 id="测试网站用的行为链actions"><a href="#测试网站用的行为链actions" class="headerlink" title="测试网站用的行为链actions"></a>测试网站用的行为链actions</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line">submitTag = driver.find_element_by_id(<span class="string">'su'</span>)</span><br><span class="line">actions =ActionChains(driver)</span><br><span class="line"></span><br><span class="line">actions.move_to_element(inputTag1)</span><br><span class="line">actions.send_keys_to_element(inputTag1)</span><br><span class="line">actions.move_to_element(submitTag)</span><br><span class="line">actions.click(submitTag)</span><br><span class="line">actions.perform()</span><br></pre></td></tr></table></figure><h2 id="cookie的获取"><a href="#cookie的获取" class="headerlink" title="cookie的获取"></a>cookie的获取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> cookie <span class="keyword">in</span> driver.get_cookies():</span><br><span class="line">    print(cookie)</span><br></pre></td></tr></table></figure><h2 id="隐式等待和显示等待"><a href="#隐式等待和显示等待" class="headerlink" title="隐式等待和显示等待"></a>隐式等待和显示等待</h2><p>显示等待：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">WebDriverWait(driver,<span class="number">10</span>).until(</span><br><span class="line">    EC.presence_of_all_elements_located(By.ID,<span class="string">'from_email'</span>)</span><br><span class="line">)</span><br><span class="line">print(element)</span><br><span class="line"><span class="comment">#等待10秒直到找到....</span></span><br></pre></td></tr></table></figure><h2 id="切换页面"><a href="#切换页面" class="headerlink" title="切换页面"></a>切换页面</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">driver_path =<span class="string">r"C:\Program Files (x86)\Google\Chrome\Application\chromedriver.exe"</span></span><br><span class="line"><span class="comment">#使用js代码打开页面,但是driver还是指向baidu</span></span><br><span class="line">driver = webdriver.Chrome(executable_path=driver_path)</span><br><span class="line">driver.get(<span class="string">'https://www.baidu.com/'</span>)</span><br><span class="line">driver.execute_script(<span class="string">"window.open('https://www.douban.com/')"</span>)</span><br><span class="line"><span class="comment">#使用js代码打开页面,并driver指向新打开的网页</span></span><br><span class="line">driver.switch_to_window(driver.window_handles[<span class="number">1</span>])</span><br><span class="line"><span class="comment">#driver_hanles是一个和列表</span></span><br><span class="line"><span class="comment">#传递的参数是窗口距离（打开页面的顺序来存储窗口的距离）</span></span><br><span class="line">print(driver.current_url)</span><br></pre></td></tr></table></figure><h2 id="使用代理ip"><a href="#使用代理ip" class="headerlink" title="使用代理ip"></a>使用代理ip</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">options =webdriver.ChromeOptions()</span><br><span class="line">options.add_argument(<span class="string">"--proxy-server=http://"</span>)</span><br><span class="line">driver.get(<span class="string">'http://httpbin.prg/ip'</span>)</span><br></pre></td></tr></table></figure><h2 id="WebElement"><a href="#WebElement" class="headerlink" title="WebElement"></a>WebElement</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">submitTag = driver.find_element_by_id(<span class="string">'su'</span>)</span><br><span class="line">print(type(submitTag))</span><br><span class="line"><span class="comment">#get_attribute获取属性</span></span><br><span class="line">print(submitTag.get_attribute(<span class="string">"value"</span>))</span><br><span class="line"><span class="comment">#保存截图</span></span><br><span class="line">driver.save_screenshot(<span class="string">"baidu.png"</span>)</span><br></pre></td></tr></table></figure><h2 id="具体用法看链接"><a href="#具体用法看链接" class="headerlink" title="具体用法看链接"></a>具体用法看链接</h2><p><a href="https://selenium-python.readthedocs.io/" target="_blank" rel="noopener">还没用过这个markdown格式</a></p><p><a href="https://selenium-python.readthedocs.io/" target="_blank" rel="noopener">https://selenium-python.readthedocs.io/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用selenium机器人打开网站&quot;&gt;&lt;a href=&quot;#使用selenium机器人打开网站&quot; class=&quot;headerlink&quot; title=&quot;使用selenium机器人打开网站&quot;&gt;&lt;/a&gt;使用selenium机器人打开网站&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; selenium &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; webdriver&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;driver_path =&lt;span class=&quot;string&quot;&gt;r&quot;C:\Program Files (x86)\Google\Chrome\Application\chromedriver.exe&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;driver = webdriver.Chrome(executable_path=driver_path)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;driver.get(&lt;span class=&quot;string&quot;&gt;&#39;https://www.baidu.com/&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="https://onceonmydoor.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式笔记</title>
    <link href="https://onceonmydoor.github.io/2018/08/03/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AC%94%E8%AE%B0/"/>
    <id>https://onceonmydoor.github.io/2018/08/03/正则表达式笔记/</id>
    <published>2018-08-03T12:15:20.000Z</published>
    <updated>2018-08-27T15:34:55.592Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式python代码笔记"><a href="#正则表达式python代码笔记" class="headerlink" title="正则表达式python代码笔记"></a>正则表达式python代码笔记</h1><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 1.匹配某个字符串</span></span><br><span class="line">text= <span class="string">'hello,h1,hehehheheheheeeeee'</span></span><br><span class="line">ret = re.match(<span class="string">'he'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.点：匹配任意字符(不能匹配换行符)</span></span><br><span class="line">text= <span class="string">'+ahello,h1,hehehheheheheeeeee'</span></span><br><span class="line">ret = re.match(<span class="string">'.'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.\d:匹配任意的数字（0-9）</span></span><br><span class="line"></span><br><span class="line">text =<span class="string">"3124512341243"</span></span><br><span class="line">ret =re.match(<span class="string">'\d'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.\D:匹配任意的非数字</span></span><br><span class="line"></span><br><span class="line">text =<span class="string">"sdas124das51asd2341243"</span></span><br><span class="line">ret =re.match(<span class="string">'\D'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. \s；匹配空白字符(\n,\t,\r,空格)</span></span><br><span class="line">text =<span class="string">"\rdas51asd2341243"</span></span><br><span class="line">ret =re.match(<span class="string">'\s'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.\w：匹配a-z和A-Z以及数字</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">text =<span class="string">"11Asd\rdas51asd2341243"</span></span><br><span class="line">ret =re.match(<span class="string">'\w'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.\W:与\w相反</span></span><br><span class="line">text =<span class="string">" +11Asd\rdas51asd2341243"</span></span><br><span class="line">ret =re.match(<span class="string">'\W'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#[]组合的方式，只要满足中括号中的字符就可以匹配</span></span><br><span class="line"></span><br><span class="line">text =<span class="string">"0731-7887123asdasdasd"</span></span><br><span class="line">ret =re.match(<span class="string">'[\d\-]+'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line"><span class="comment">#output:0731-7887123</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 中括号的形式代替\d:[0-9]</span></span><br><span class="line">text =<span class="string">'a09'</span></span><br><span class="line">ret = re.match(<span class="string">'[0-9]'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 中括号的形式代替\D:[^0-9]</span></span><br><span class="line">text =<span class="string">'a09'</span></span><br><span class="line">ret = re.match(<span class="string">'[^0-9]'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># # # 中括号的形式代替\w:[a-zA-Z0-9]</span></span><br><span class="line">text =<span class="string">'a09'</span></span><br><span class="line">ret = re.match(<span class="string">'[a-zA-Z0-9]'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># # # 中括号的形式代替\W:[^a-zA-Z0-9]</span></span><br><span class="line">text =<span class="string">'$%#$#&amp;^%$&amp;^5675a09'</span></span><br><span class="line">ret = re.match(<span class="string">'[^a-zA-Z0-9]'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#匹配多个字符</span></span><br><span class="line"><span class="comment">#1.*：匹配0个或多个字符</span></span><br><span class="line">text =<span class="string">'567511a0aaaa1111119'</span></span><br><span class="line">ret = re.match(<span class="string">'\d*'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.+:匹配1个或多个###   &gt;=1</span></span><br><span class="line"><span class="comment"># 多个字符&gt;=1</span></span><br><span class="line">text =<span class="string">'abcd'</span></span><br><span class="line">ret = re.match(<span class="string">'\w+'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##3.?:匹配1个或0个</span></span><br><span class="line">text =<span class="string">' 1abcd'</span></span><br><span class="line">ret = re.match(<span class="string">'\w?'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.&#123;m&#125;匹配m个字符：</span></span><br><span class="line">text =<span class="string">'1abcd'</span></span><br><span class="line">ret = re.match(<span class="string">'\w&#123;3&#125;'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line"><span class="comment"># 5.&#123;m,n&#125;匹配m-n个字符：</span></span><br><span class="line">text =<span class="string">'1a+bcd'</span></span><br><span class="line">ret = re.match(<span class="string">'\w&#123;1,4&#125;'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">############小案例############</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证邮箱：</span></span><br><span class="line">text =<span class="string">'hzj.boxes@gmail.com'</span></span><br><span class="line">ret = re.match(<span class="string">'.+@[a-z0-9]+\.[a-z]+'</span>,text)<span class="comment"># . 加反斜杠之后反义无正则表达式中的.的意思</span></span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证url:</span></span><br><span class="line">text =<span class="string">'https://www.gushiwen.org/default_2.aspx'</span></span><br><span class="line">ret = re.match(<span class="string">'(http|https|ftp)://[^\s]+'</span>,text)<span class="comment"># . 加反斜杠之后反义无正则表达式中的.的意思</span></span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证身份证：</span></span><br><span class="line">text =<span class="string">"330282199708145531"</span></span><br><span class="line">ret = re.match(<span class="string">'\d&#123;17&#125;[Xx\d]'</span>,text)<span class="comment"># . 加反斜杠之后反义无正则表达式中的.的意思</span></span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># ^(脱字号)</span></span><br><span class="line">text =<span class="string">"hello"</span></span><br><span class="line">ret = re.search(<span class="string">'^h'</span>,text)<span class="comment"># 以。开始</span></span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  $:以...结尾：</span></span><br><span class="line">text =<span class="string">"hello@163.com"</span></span><br><span class="line">ret = re.match(<span class="string">'.+@163.com$'</span>,text)<span class="comment"># 以。开始</span></span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># |:匹配多个字符串或表达式</span></span><br><span class="line">text =<span class="string">'https://www.gushiwen.org/default_2.aspx'</span></span><br><span class="line">ret = re.match(<span class="string">'(http|https|ftp)://[^\s]+'</span>,text)<span class="comment"># . 加反斜杠之后反义无正则表达式中的.的意思</span></span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 贪婪模式和非贪婪模式</span></span><br><span class="line">text =<span class="string">'0123456'</span></span><br><span class="line">ret = re.match(<span class="string">'\d+?'</span>,text)<span class="comment"># . 加反斜杠之后反义无正则表达式中的.的意思</span></span><br><span class="line">print(ret.group())</span><br><span class="line"><span class="comment">#非贪婪模式 ? 满足的最小条件</span></span><br><span class="line">text =<span class="string">'&lt;h1&gt;zxc&lt;/h1&gt;'</span></span><br><span class="line">ret = re.match(<span class="string">'&lt;.+?&gt;'</span>,text)<span class="comment"># . 加反斜杠之后反义无正则表达式中的.的意思</span></span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="comment">##############匹配0-100的数字不包括09,101,1001</span></span><br><span class="line">text =<span class="string">'100'</span></span><br><span class="line">ret = re.match(<span class="string">'[1-9][0-9]?$|100$'</span>,text)<span class="comment"># . 加反斜杠之后反义无正则表达式中的.的意思</span></span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 反义符号</span></span><br><span class="line">text =<span class="string">"apple is $2131"</span></span><br><span class="line">ret = re.search(<span class="string">'\$\d+'</span>,text)<span class="comment"># . 加反斜杠之后反义无正则表达式中的.的意思</span></span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##原生字符</span></span><br><span class="line">text =<span class="string">r"\n"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python :'\\\\n'=\\n</span></span><br><span class="line"><span class="comment">#正则表达式 ：'\\n' =\n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ret = re.search('\\\\n',text)# . 加反斜杠之后反义无正则表达式中的.的意思</span></span><br><span class="line">ret = re.search(<span class="string">r'\\n'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##group 分组()</span></span><br><span class="line">text =<span class="string">"apple's price is $88,iphonx's peice is $888"</span></span><br><span class="line">ret = re.search(<span class="string">'.*(\$\d+).*(\$\d+)'</span>,text)</span><br><span class="line">print(ret.groups())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## find_all函数</span></span><br><span class="line">text =<span class="string">"apple's price is $88,iphonx's peice is $888"</span></span><br><span class="line">ret = re.findall(<span class="string">'\$\d+'</span>,text)</span><br><span class="line">print(ret)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sub函数</span></span><br><span class="line">text =<span class="string">"apple's price is $88,iphonx's peice is $888"</span></span><br><span class="line">ret = re.sub(<span class="string">'\$\d+'</span>,<span class="string">'$1'</span>,text)</span><br><span class="line">print(ret)</span><br><span class="line"></span><br><span class="line"><span class="comment">###ret = re.sub('&lt;.+?&gt;',"",text)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># split函数</span></span><br><span class="line"></span><br><span class="line">text =<span class="string">"hello&amp;world ni hao"</span></span><br><span class="line">ret = re.split(<span class="string">' |&amp;'</span>,text)</span><br><span class="line"><span class="comment"># 遇到xx或xx就分割</span></span><br><span class="line">ret = re.split(<span class="string">'[^a-zA-Z]'</span>,text)</span><br><span class="line"><span class="comment"># 一遇到非xxx就分割</span></span><br><span class="line">print(ret)</span><br><span class="line"></span><br><span class="line"><span class="comment">########## compile函数#############</span></span><br><span class="line">text = <span class="string">'the number is 20.121212'</span></span><br><span class="line">r = re.compile(<span class="string">r"""</span></span><br><span class="line"><span class="string">    \d+ #小数点前的数</span></span><br><span class="line"><span class="string">    \.? #小数点本身</span></span><br><span class="line"><span class="string">    \d* #小数点之后的数字</span></span><br><span class="line"><span class="string">"""</span>,re.VERBOSE)</span><br><span class="line">ret = re.search(r,text)</span><br><span class="line">print(ret.group())</span><br><span class="line"><span class="comment">#处理高并发问题</span></span><br></pre></td></tr></table></figure><p>:)<br>:)</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;正则表达式python代码笔记&quot;&gt;&lt;a href=&quot;#正则表达式python代码笔记&quot; class=&quot;headerlink&quot; title=&quot;正则表达式python代码笔记&quot;&gt;&lt;/a&gt;正则表达式python代码笔记&lt;/h1&gt;
    
    </summary>
    
    
      <category term="正则表达式" scheme="https://onceonmydoor.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>BeautifulSoup笔记</title>
    <link href="https://onceonmydoor.github.io/2018/08/01/BeautifulSoup%E7%AC%94%E8%AE%B0/"/>
    <id>https://onceonmydoor.github.io/2018/08/01/BeautifulSoup笔记/</id>
    <published>2018-08-01T13:07:54.000Z</published>
    <updated>2018-08-27T15:35:09.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="find-all的使用："><a href="#find-all的使用：" class="headerlink" title="find_all的使用："></a>find_all的使用：</h2><p>1.在提取标签的时候，第一个参数是标签的名字，<br>过滤，通过同关键字参数的形式传入<br>可以用’attrs’通过字典传入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trs = soup.find_all(<span class="string">'tr'</span>,attrs=&#123;<span class="string">'class'</span>:<span class="string">'even'</span>&#125;)</span><br></pre></td></tr></table></figure></p><p>2.可以用’limit’参数限制提取<br>3.<strong>注意</strong>：class标签要加_如代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trs =soup.find_all(<span class="string">'tr'</span>,class_=<span class="string">'even'</span>)</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="find与find-all的区别："><a href="#find与find-all的区别：" class="headerlink" title="find与find_all的区别："></a>find与find_all的区别：</h3><p>1.find：只会返回一个元素（找到的第一个满足条件的标签）<br>2.find_all:是个列表，所有符合条件的</p><h3 id="使用find和find-all的过滤条件："><a href="#使用find和find-all的过滤条件：" class="headerlink" title="使用find和find_all的过滤条件："></a>使用find和find_all的过滤条件：</h3><p>1.关键字参数：直接在其后价入关键字参数<br>2.attrs参数：字典</p><h3 id="获取标签的属性："><a href="#获取标签的属性：" class="headerlink" title="获取标签的属性："></a>获取标签的属性：</h3><p>1.通过下标获取：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">href =a[<span class="string">'href'</span>]</span><br></pre></td></tr></table></figure></p><p>2.通过attrs属性获取：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">href =a.attrs[<span class="string">'href'</span>]</span><br></pre></td></tr></table></figure></p><h3 id="strings和stripped-sterings属性以及get-text方法："><a href="#strings和stripped-sterings属性以及get-text方法：" class="headerlink" title="strings和stripped_sterings属性以及get_text方法："></a>strings和stripped_sterings属性以及get_text方法：</h3><p>0.string:获取某个标签下的非标签字符串{<strong>字符串</strong>}<br>1.strings:获取某个标签下的子孙非标签字符串{<strong>列表</strong>}<br>2.stripped_strings:获取某个标签下的子孙非标签字符串，取消换行的\n字符串{<strong>列表</strong>}<br>3.get_text:获取某个标签下的子孙非标签字符串{<strong>字符串</strong>}</p><h2 id="CSS选择器："><a href="#CSS选择器：" class="headerlink" title="CSS选择器："></a>CSS选择器：</h2><p>1.根据标签的名字选择：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">            <span class="attribute">background-color</span>: pink;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>2.根据class的名字选择:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.line</span>&#123;</span><br><span class="line">            <span class="attribute">background-color</span>: pink;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>3.根据id的名字选择:(一般id只有一个)<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box</span>&#123;</span><br><span class="line">            <span class="attribute">background-color</span>: pink;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>4.查找<strong>所有</strong>子孙元素：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">            <span class="attribute">background-color</span>: pink;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>5.查找<strong>直接</strong>子元素:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box</span> &gt; <span class="selector-tag">p</span>&#123;</span><br><span class="line">            <span class="attribute">background-color</span>: pink;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>6.根据属性名字查找：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[name='username']</span>&#123;</span><br><span class="line">            <span class="attribute">background-color</span>: pink;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><h2 id="BeautifulSoup-中使用css选择器"><a href="#BeautifulSoup-中使用css选择器" class="headerlink" title="BeautifulSoup 中使用css选择器"></a>BeautifulSoup 中使用css选择器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">trs =soup.select(<span class="string">'tr'</span>)</span><br><span class="line"><span class="keyword">for</span> tr <span class="keyword">in</span> trs:</span><br><span class="line">    infos =list(tr.stripped_strings)</span><br><span class="line">    print(infos)</span><br></pre></td></tr></table></figure><p>获取所有的class等于even的tr标签<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">trs = soup.select(<span class="string">'tr.even'</span>)</span><br><span class="line">trs = soup.select(<span class="string">"tr[class='even']"</span>)</span><br></pre></td></tr></table></figure></p><h2 id="常见的四种对象："><a href="#常见的四种对象：" class="headerlink" title="常见的四种对象："></a>常见的四种对象：</h2><p>1.Tag： BS中所有的标签都是Tag类型，并且BS的对象其实本质上也是TAG类型<br>常用方法find、find_all<br>2.NavigableString ：继承自python中str<br>3.BeautifulSoup:继承自TAG<br>4.Comments:继承自NavigableString</p><h2 id="contents和children："><a href="#contents和children：" class="headerlink" title="contents和children："></a>contents和children：</h2><p>返回某个标签下的直接子元素，contents返回来的是列表，children返回的是迭代器<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">div = soup.find(<span class="string">'div'</span>)</span><br><span class="line">print(div.contents)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;find-all的使用：&quot;&gt;&lt;a href=&quot;#find-all的使用：&quot; class=&quot;headerlink&quot; title=&quot;find_all的使用：&quot;&gt;&lt;/a&gt;find_all的使用：&lt;/h2&gt;&lt;p&gt;1.在提取标签的时候，第一个参数是标签的名字，&lt;br&gt;过滤，通过同关键字参数的形式传入&lt;br&gt;可以用’attrs’通过字典传入&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;trs = soup.find_all(&lt;span class=&quot;string&quot;&gt;&#39;tr&#39;&lt;/span&gt;,attrs=&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;class&#39;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&#39;even&#39;&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2.可以用’limit’参数限制提取&lt;br&gt;3.&lt;strong&gt;注意&lt;/strong&gt;：class标签要加_如代码：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;trs =soup.find_all(&lt;span class=&quot;string&quot;&gt;&#39;tr&#39;&lt;/span&gt;,class_=&lt;span class=&quot;string&quot;&gt;&#39;even&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="https://onceonmydoor.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>XML语法笔记</title>
    <link href="https://onceonmydoor.github.io/2018/07/28/XML%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    <id>https://onceonmydoor.github.io/2018/07/28/XML语法笔记/</id>
    <published>2018-07-28T12:53:01.000Z</published>
    <updated>2018-08-27T15:35:02.783Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python爬虫-xpath语法笔记"><a href="#python爬虫-xpath语法笔记" class="headerlink" title="python爬虫 xpath语法笔记"></a>python爬虫 xpath语法笔记</h2><p>XPath 使用路径表达式来选取 XML 文档中的节点或节点集。节点是通过沿着路径 (path) 或者步 (steps) 来选取的。</p><h3 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h3><p>使用//获取整个页面中的元素，然后写标签名，然后再写词进行提取<br>如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//div[@class="abc"]</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h3><p>1./和//的区别，/代表只获取直接子节点。//获取子孙节点。一般//用的比较多。当然也要视情况而定<br>2.contains:当某个属性包含多个值时，那么可以使用’contains’函数如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//div[contains(@class,'job_detail')]</span><br></pre></td></tr></table></figure></p><p>3.谓词中的下标是从1开始的</p><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>nodename</td><td>选取此节点的所有子节点。</td></tr><tr><td>/</td><td>从根节点选取。</td></tr><tr><td>//</td><td>从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。</td></tr><tr><td>.</td><td>选取当前节点。</td></tr><tr><td>..</td><td>选取当前节点的父节点</td></tr><tr><td>@</td><td>选取属性。</td></tr></tbody></table><h3 id="谓语（Predicates）"><a href="#谓语（Predicates）" class="headerlink" title="谓语（Predicates）"></a>谓语（Predicates）</h3><p>谓语用来查找某个特定的节点或者包含某个指定的值的节点。</p><p>谓语被嵌在方括号中。</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>在下面的表格中，我们列出了带有谓语的一些路径表达式，以及表达式的结果：</p><table><thead><tr><th>路径表达式</th><th>结果</th></tr></thead><tbody><tr><td>/bookstore/book[1]</td><td>选取属于 bookstore 子元素的第一个 book 元素。</td></tr><tr><td>/bookstore/book[last()]</td><td>选取属于 bookstore 子元素的最后一个 book 元素。</td></tr><tr><td>/bookstore/book[last()-1]</td><td>选取属于 bookstore 子元素的倒数第二个 book 元素。</td></tr><tr><td>/bookstore/book[position()&lt;3]</td><td>选取最前面的两个属于 bookstore 元素的子元素的 book 元素</td></tr><tr><td>//title[@lang]</td><td>选取所有拥有名为 lang 的属性的 title 元素。</td></tr><tr><td>//title[@lang=’eng’]</td><td>选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td></tr><tr><td>/bookstore/book[price&gt;35.00]</td><td>选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td></tr><tr><td>/bookstore/book[price&gt;35.00]/title</td><td>选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td></tr></tbody></table><h2 id="使用lxml解析HTML代码："><a href="#使用lxml解析HTML代码：" class="headerlink" title="使用lxml解析HTML代码："></a>使用lxml解析HTML代码：</h2><p>1.解析html字符串：使用’lxml.etree.HTML’进行解析。示例代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">htmlabc =etree.HTML(text)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"htmlabc.html"</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(etree.tostring(htmlabcencoding=<span class="string">'utf-8'</span>).decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure></p><p>2.解析html文件：用’lxml.etree.parse’进行解析。代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">htmlabc =etree.parse(<span class="string">"htmlabc.html"</span>)</span><br><span class="line">    print(etree.tostring(htmlabcencoding=<span class="string">'utf-8'</span>).decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure></p><p>这个函数默认使用’XML’解析器，所以如果碰到一些不规范的’HTML’代码时<br>就会解析错误，这时候就要自己创建’HTML’解析器<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parser = etree.HTMLParser(encoding=<span class="string">"utf-8"</span>)</span><br><span class="line"> htmlabc = etree.parse(<span class="string">'htmlabc.html'</span>,parser=parser)</span><br><span class="line"> print(etree.tostring(htmlabc,encoding=<span class="string">'utf-8'</span>).decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python爬虫-xpath语法笔记&quot;&gt;&lt;a href=&quot;#python爬虫-xpath语法笔记&quot; class=&quot;headerlink&quot; title=&quot;python爬虫 xpath语法笔记&quot;&gt;&lt;/a&gt;python爬虫 xpath语法笔记&lt;/h2&gt;&lt;p&gt;XPath 使用路径表达式来选取 XML 文档中的节点或节点集。节点是通过沿着路径 (path) 或者步 (steps) 来选取的。&lt;/p&gt;
&lt;h3 id=&quot;使用方式：&quot;&gt;&lt;a href=&quot;#使用方式：&quot; class=&quot;headerlink&quot; title=&quot;使用方式：&quot;&gt;&lt;/a&gt;使用方式：&lt;/h3&gt;&lt;p&gt;使用//获取整个页面中的元素，然后写标签名，然后再写词进行提取&lt;br&gt;如：&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//div[@class=&quot;abc&quot;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="XML" scheme="https://onceonmydoor.github.io/tags/XML/"/>
    
  </entry>
  
  <entry>
    <title>蜕变</title>
    <link href="https://onceonmydoor.github.io/2018/07/23/%E8%9C%95%E5%8F%98/"/>
    <id>https://onceonmydoor.github.io/2018/07/23/蜕变/</id>
    <published>2018-07-23T12:59:19.000Z</published>
    <updated>2018-07-23T15:30:05.823Z</updated>
    
    <content type="html"><![CDATA[<h2 id="天下古今之庸人，皆以一惰字致败；天下古今之才人，皆以一傲字致败——————曾国藩"><a href="#天下古今之庸人，皆以一惰字致败；天下古今之才人，皆以一傲字致败——————曾国藩" class="headerlink" title="天下古今之庸人，皆以一惰字致败；天下古今之才人，皆以一傲字致败——————曾国藩"></a>天下古今之庸人，皆以一惰字致败；天下古今之才人，皆以一傲字致败——————曾国藩</h2><p>我想我如果还在愁这愁那的考虑考公还是工作说明我还有时间，我为什么不把这些时间用来做些事呢</p><p>好久没写过文章了，今天心血来潮突然想起自己还有个博客。记一下自己的想法吧。<br>现在在学习安卓，说实话，我到大四了，真的什么都没学会，连leetcode里最简单的题都不会，甚至思路都没<br>我不知道我是笨还是什么，但是时间是真的没花，我完全不知道我之前三年在干嘛，三年学了一些啥？<br><a id="more"></a><br>我不知道自己多编程是怎么看的，是喜欢呢，还是厌恶？20年以来我从没感受过疯狂喜欢一件事或一个人，或者说都不长久<br>我羡慕那些一直喜欢一个明星的人，我羡慕那些可以一直玩一个游戏的人，我羡慕那些可以一直坚持做某件事的人，我羡慕那些可以一直爱一个人的人<br>这些我都没有，我一直以为我这是儒家的博爱，可是现在想想我只是可悲，我知道所有人都会对新鲜的事感到好奇和兴奋是因为多巴胺的分泌，可是为什么你们的<br>多巴胺降的少。真的我只是羡慕，无从改变，我觉得改变了我就不是我了，但是有什么行业能一直改变？（演员,算了吧，这条路也太不适合内向的我了毫无表演欲）<br>想活一个不一样的人生怎么这么难，我们只是挣扎，彷徨，羡慕，不会去真正的执行，可是有才多少有勇气的人去过不一样的人生。大多数只是生活的过客吧，<br>平平凡凡，不来任何东西，也不带走任何东西，甚至还不留下任何东西。这样就够了吗？我犹豫多少次才决定了考公，多么不像以前的我，一个仿佛对生活妥协的人，<br>我们果然最后还是要成为我们最讨厌的人，现实总是站在高处恶狠狠的抽着梦想。受过多少打击才能向前走一部，又有多少人在这一步倒下？最可悲的是连梦想都没的我<br>连社会都没接触过，就已经在起点处倒下。我要站起来，虽然疼，但我不能被近处的人所嘲笑。<br>他们都在笑，笑得我慎得慌，他们笑我的懦弱，我笑我无知，甚至还笑我选的路。可又有谁能笑到最后呢？<br>现在开始我还是少看点无意义的直播，不玩游戏了，G胖快还我钱！手机也是，说到手机我发现买了S8之后玩手机的频率上升了都怪酷安和即刻（手动滑稽）<br>现在还是一边学安卓一边刷公务员吧。我可能是比别人笨，可是当我花的时间多自然会进步吧，我没有导师或学长指导肯定会走很多弯路，但是总比不进步好吧。愿自己能够坚持。<br>我不知道别人的大学四年是怎么样的，别人如何看待大学时光的，反正我自己觉得不够重要，但对我来说反而具有教育意义，当初是真的在浪费时间，大一一进来真的认为大学可以为所欲为<br>最后后悔的还是自己，没有明确的目的，得过且过。教育意义还是有的，我知道了老师也只是完成任务罢了，所谓的成绩也只是在老师在word的上的两个阿拉伯数字，真的是对老师来说<br>无所谓的事过于主观，还有50%的平时分简直就是笑话。当然我在这里完全没有认为是大学的教育模式的错，措是错在我自己，没有努力。我也清楚大学结束也只是人生的开始<br>4年不长一瞬间就过去了，我不知道未来怎么样,对于我这种没有恒心的人，未来的路简直就是北京雾霾。4年也不短是人生的20分之一。<br>正如这个文章的题目，我是慢慢的在成熟，我感觉出来了，现在再成熟就晚了。</p><p>不是小学时代的随笔‘我觉得我在蜕变’而是在心💗里觉得我变化了，变得自卑了。</p><p>当然努力是第一位的。</p><p>天下事以难而废者十之一，以惰而废者十之九。</p><p>：)我也知道我的散文是真的意识流，写的跟屎一样。但是，下次看到这篇文章的时候我希望我能变得更优秀，混日子每个人都会，但是混好日子就不一定了</p><h2 id="写给未来的我："><a href="#写给未来的我：" class="headerlink" title="写给未来的我：)"></a>写给未来的我：)</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;天下古今之庸人，皆以一惰字致败；天下古今之才人，皆以一傲字致败——————曾国藩&quot;&gt;&lt;a href=&quot;#天下古今之庸人，皆以一惰字致败；天下古今之才人，皆以一傲字致败——————曾国藩&quot; class=&quot;headerlink&quot; title=&quot;天下古今之庸人，皆以一惰字致败；天下古今之才人，皆以一傲字致败——————曾国藩&quot;&gt;&lt;/a&gt;天下古今之庸人，皆以一惰字致败；天下古今之才人，皆以一傲字致败——————曾国藩&lt;/h2&gt;&lt;p&gt;我想我如果还在愁这愁那的考虑考公还是工作说明我还有时间，我为什么不把这些时间用来做些事呢&lt;/p&gt;
&lt;p&gt;好久没写过文章了，今天心血来潮突然想起自己还有个博客。记一下自己的想法吧。&lt;br&gt;现在在学习安卓，说实话，我到大四了，真的什么都没学会，连leetcode里最简单的题都不会，甚至思路都没&lt;br&gt;我不知道我是笨还是什么，但是时间是真的没花，我完全不知道我之前三年在干嘛，三年学了一些啥？&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://onceonmydoor.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>如何倾听“年轻的声音”?</title>
    <link href="https://onceonmydoor.github.io/2018/04/25/%E5%A6%82%E4%BD%95%E5%80%BE%E5%90%AC%E2%80%9C%E5%B9%B4%E8%BD%BB%E7%9A%84%E5%A3%B0%E9%9F%B3%E2%80%9D/"/>
    <id>https://onceonmydoor.github.io/2018/04/25/如何倾听“年轻的声音”/</id>
    <published>2018-04-25T02:08:47.000Z</published>
    <updated>2018-08-27T15:36:08.258Z</updated>
    
    <content type="html"><![CDATA[<pre><code>学生和教职员工一起，构成了一所大学的命运共同体。</code></pre><p>​​​这几天，一封来自北大学生的公开信传播甚广。信中提到的北大相关学院对这位同学提请信息公开一事的处置，引发舆论关注和思考。</p><p>信中涉及的相关事实还有待确认，北大相关学院也在第一时间发布了情况说明，表达了“尽一切努力关心爱护学生”“始终尊重每一位同学的基本权利、努力保障每一位同学的合法权益”的态度。应该说，<strong>学校和学生不是对立关系。让燕园更加美好的初衷是一致的，追求公平公开的目标是统一的</strong>。<br><a id="more"></a><br>这一事件，和近几个月来陆续发生在高校中的一些热点事件一样，在很大程度上都涉及如何以恰当方式回应学生诉求。<strong>如何在真情实意中消解困惑，如何用对话交流化解矛盾，也是一个做好学生工作的大问题</strong>。</p><p><strong>“因事而化、因时而进、因势而新”，这是习近平总书记对高校思想政治工作提出的基本方法论</strong>。说到底，就是要把握好这一代人的思想和行为特点，把握好年轻人的个性和共性特征，在疏导情绪中赢得尊重，在解疑释惑中凝聚共识，最终达到春风化雨、成风化人的效果。</p><p>的确，<strong>新时代的青年人特点鲜明</strong>。成长于改革开放后中国发展的黄金岁月，欣逢新时代开启的难得机遇，他们可谓是幸运的一代。无论是中国走近世界舞台中央带来的开阔视野，还是中华民族从富起来到强起来激发的强烈自信，都使得年轻人对国家、民族、社会和自身，有着更系统、更深入的思考。他们有很强的权利意识、法治观念，也有着很强的社会责任感，比以往任何一代人都更有能力独立自主地认识世界。这是教育普及的结果，更是时代进步的表现，也是做好学生工作时应该看到的大背景。</p><p><strong>回到此次事件，要从根本上化解对立情绪，还需要我们对这样的背景有更多的体认，对这一代年轻人的成长状况有更深入的了解。应该说，学生工作从根本上来说是做人的工作，必须以学生为中心，关爱学生、尊重学生、服务学生。</strong>学生的思想意识成长了，工作的方式方法也需要升级。在回应关切、纾解焦虑上，正需要“因事而化”，认清他们的诉求，聆听他们的声音，学会与他们对话。这不仅是方法问题，更是理念问题。</p><p><strong>学生和教职员工一起，构成了一所大学的命运共同体</strong>。在处理问题时，双方都可以更多一些包容和耐心。对学校来说，对建设性意见要及时吸纳，对困难要及时帮助，对不了解情况的要及时说明，对模糊认识要及时廓清，对怨气怨言要及时化解，对错误看法要及时引导，不能因为种种原因而躲闪回避、简单解决。而从学生方面说，也可以换位思考，而不是站到对立面上去，尤其要避免一些极端的情绪和偏激的做法，力争在理性、冷静的轨道上表达诉求、解决问题。<strong>双方共同努力，才能更好地推动学校的发展、推动社会的前行</strong>。</p><p>眼底未名水，胸中黄河月。与民族共命运、与时代共进步，一直是北大最值得骄傲、最让人尊重的传统和精神。青年学生是国家民族的未来，善于做精神层面、价值层面的对话，善于做人生观、世界观的引导，才能进一步激荡青春的力量，绽放梦想的荣光。</p><p>来源：人民日报评论微信公众号​​​​</p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;学生和教职员工一起，构成了一所大学的命运共同体。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​​​这几天，一封来自北大学生的公开信传播甚广。信中提到的北大相关学院对这位同学提请信息公开一事的处置，引发舆论关注和思考。&lt;/p&gt;
&lt;p&gt;信中涉及的相关事实还有待确认，北大相关学院也在第一时间发布了情况说明，表达了“尽一切努力关心爱护学生”“始终尊重每一位同学的基本权利、努力保障每一位同学的合法权益”的态度。应该说，&lt;strong&gt;学校和学生不是对立关系。让燕园更加美好的初衷是一致的，追求公平公开的目标是统一的&lt;/strong&gt;。&lt;br&gt;
    
    </summary>
    
    
      <category term="公文" scheme="https://onceonmydoor.github.io/tags/%E5%85%AC%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>FileOutputStream和FileInputStream的使用</title>
    <link href="https://onceonmydoor.github.io/2018/04/25/FileOutputStream%E5%92%8CFileInputStream%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://onceonmydoor.github.io/2018/04/25/FileOutputStream和FileInputStream的使用/</id>
    <published>2018-04-25T02:03:00.000Z</published>
    <updated>2018-04-25T02:16:51.375Z</updated>
    
    <content type="html"><![CDATA[<p>Context提供如下两种方法来打开应用程序的数据文件夹里的文件IO流。</p><p>1.FileOutputStream openFileOutput(String name,int mode)::打开应用程序的数据文件夹下的name文件对应输出流；</p><p>2.FileInputStream openFileInput(String name)::打开应用程序的数据文件夹下name文件对应输出流。<br><a id="more"></a></p><p>int mode 制定打开文件的模式：</p><p>a.MODE_PRIVATE:该文件只能被当前程读写；</p><p>b.MODE_APPEND:以追加方式打开文件，应用可以向该文件追加内容；</p><p>c.MODE_WORLD_READABLE:该文件内容可被其他应用读取；</p><p>d.MODE_WORLD_WRITEABLE:该文件的内容可由其他程序读写；</p><p>在访问应用程序的数据文件夹中，context还提供如下方法来访问</p><p>a.getDir(String name,int mode):在应用程序的数据文件夹下获取或者创建name对应的子目录；</p><p>b. File getFilesDir():获取该应用程序的数据文件夹的绝对路径；</p><p>c. String[] fileList():返回该应用程序的数据文件夹下的全部文件；</p><p>d.deleteFile(String):删除该应用程序的数据文件夹下的指定文件。</p><p>本程序示范如何读写程序数据文件夹下的文件，布局中包括两个按钮，一个是写入，一个写出。还有两个输入文本框，在editText1中写出数据，按下写入后，点击读取，写入的信息就会在editText2上显示。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.filedemo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.View.OnClickListener;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILE_NAME = <span class="string">"sky_brian"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">setContentView(R.layout.main);</span><br><span class="line">System.out.println(<span class="keyword">new</span> StringBuilder(<span class="string">"a"</span>).append(<span class="string">"b"</span>).append(<span class="string">"c"</span>)</span><br><span class="line">.toString());</span><br><span class="line"><span class="comment">// 获取两个按钮</span></span><br><span class="line">Button write = (Button) findViewById(R.id.write);</span><br><span class="line">Button read = (Button) findViewById(R.id.read);</span><br><span class="line"><span class="comment">// 获取两个输入框</span></span><br><span class="line"><span class="keyword">final</span> EditText editText1 = (EditText) findViewById(R.id.editText1);</span><br><span class="line"><span class="keyword">final</span> EditText editText2 = (EditText) findViewById(R.id.editText2);</span><br><span class="line"><span class="comment">// 为write 按钮绑定监听器</span></span><br><span class="line">write.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">// 将editText1中的内容写入文件中</span></span><br><span class="line">write(editText1.getText().toString());</span><br><span class="line">editText1.setText(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">read.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">// 读取制定文件中的内容，并显示出来</span></span><br><span class="line">editText2.setText(read());</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//打开文件输入流</span></span><br><span class="line">FileInputStream fis = openFileInput(FILE_NAME);</span><br><span class="line"><span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> hasRead = <span class="number">0</span>;</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">""</span>);</span><br><span class="line"><span class="keyword">while</span>((hasRead = fis.read(buff))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">sb.append(<span class="keyword">new</span> String(buff,<span class="number">0</span>,hasRead));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String content)</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//以追加的模式打开文件输出流</span></span><br><span class="line">FileOutputStream fos = openFileOutput(FILE_NAME ,MODE_APPEND);</span><br><span class="line"><span class="comment">//将FileOutputStream包装成printStream</span></span><br><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(fos);</span><br><span class="line"><span class="comment">//输出文件内容</span></span><br><span class="line">ps.println(content);</span><br><span class="line">ps.close();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Context提供如下两种方法来打开应用程序的数据文件夹里的文件IO流。&lt;/p&gt;
&lt;p&gt;1.FileOutputStream openFileOutput(String name,int mode)::打开应用程序的数据文件夹下的name文件对应输出流；&lt;/p&gt;
&lt;p&gt;2.FileInputStream openFileInput(String name)::打开应用程序的数据文件夹下name文件对应输出流。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>墓床</title>
    <link href="https://onceonmydoor.github.io/2018/04/02/%E5%A2%93%E5%BA%8A/"/>
    <id>https://onceonmydoor.github.io/2018/04/02/墓床/</id>
    <published>2018-04-02T13:58:16.000Z</published>
    <updated>2018-04-02T13:59:27.476Z</updated>
    
    <content type="html"><![CDATA[<p>我知道永逝降临，并不悲伤<br>松林中安放着我的愿望<br>下边有海，远看像水池<br>一点点跟我的是下午的阳光<br>　　<br>人时已尽，人世很长<br>我在中间应当休息<br>走过的人说树枝低了<br>走过的人说树枝在长</p><pre><code>--顾城</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我知道永逝降临，并不悲伤&lt;br&gt;松林中安放着我的愿望&lt;br&gt;下边有海，远看像水池&lt;br&gt;一点点跟我的是下午的阳光&lt;br&gt;　　&lt;br&gt;人时已尽，人世很长&lt;br&gt;我在中间应当休息&lt;br&gt;走过的人说树枝低了&lt;br&gt;走过的人说树枝在长&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;--顾城
&lt;/c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>初学安卓</title>
    <link href="https://onceonmydoor.github.io/2018/03/06/%E5%88%9D%E5%AD%A6%E5%AE%89%E5%8D%93/"/>
    <id>https://onceonmydoor.github.io/2018/03/06/初学安卓/</id>
    <published>2018-03-06T10:25:03.000Z</published>
    <updated>2018-08-27T15:34:49.754Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Android-fill-parent、wrap-content和match-parent的区别"><a href="#Android-fill-parent、wrap-content和match-parent的区别" class="headerlink" title="Android fill_parent、wrap_content和match_parent的区别"></a>Android fill_parent、wrap_content和match_parent的区别</h2><p>三个属性都用来适应视图的水平或垂直大小，一个以视图的内容或尺寸为基础的布局比精确地指定视图范围更加方便。</p><h3 id="1）fill-parent"><a href="#1）fill-parent" class="headerlink" title="1）fill_parent"></a>1）fill_parent</h3><p>设置一个构件的布局为fill_parent将强制性地使构件扩展，以填充布局单元内尽可能多的空间。这跟Windows控件的dockstyle属性大体一致。设置一个顶部布局或控件为fill_parent将强制性让它布满整个屏幕。</p><h3 id="2）-wrap-content"><a href="#2）-wrap-content" class="headerlink" title="2） wrap_content"></a>2） wrap_content</h3><p>设置一个视图的尺寸为wrap_content将强制性地使视图扩展以显示全部内容。以TextView和ImageView控件为例，设置为wrap_content将完整显示其内部的文本和图像。布局元素将根据内容更改大小。设置一个视图的尺寸为wrap_content大体等同于设置Windows控件的Autosize属性为True。</p><h3 id="3）match-parent"><a href="#3）match-parent" class="headerlink" title="3）match_parent"></a>3）match_parent</h3><p>   Android2.2中match_parent和fill_parent是一个意思 .两个参数意思一样，match_parent更贴切，于是从2.2开始两个词都可以用。那么如果考虑低版本的使用情况你就需要用fill_parent了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Android-fill-parent、wrap-content和match-parent的区别&quot;&gt;&lt;a href=&quot;#Android-fill-parent、wrap-content和match-parent的区别&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
      <category term="安卓" scheme="https://onceonmydoor.github.io/tags/%E5%AE%89%E5%8D%93/"/>
    
  </entry>
  
  <entry>
    <title>第一篇随笔</title>
    <link href="https://onceonmydoor.github.io/2018/02/10/%E7%AC%AC%E4%B8%80%E7%AF%87%E9%9A%8F%E7%AC%94/"/>
    <id>https://onceonmydoor.github.io/2018/02/10/第一篇随笔/</id>
    <published>2018-02-10T13:43:07.000Z</published>
    <updated>2018-02-10T14:24:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="脏"><a href="#脏" class="headerlink" title="脏"></a>脏</h2><p>这是我自己写的第一篇随笔纯手打无草稿意识流。<br>今天洗车的时候在想，脏的定义是什么，泥土，还是细菌。车因为泥，它脏了，人因为什么才会脏。<br>我又想起我看过的一个视频一个清华的用微积分解释了一片薯片掉在地上有没有脏，结果说什么曲面掉在地上与地面接触是直线，在微积分里一条直线的面积是0，所以薯片没脏。可能我们吃的不是同一种薯片吧，他吃的薯片掉地上之后竟然不会来回滚，而是直线落地不动的。回到洗车。在洗车的时候我想一个问题：“两片薯片，一片全是泥土，一片全是姨妈血，你必须额吃一片，你吃啥？”<br>说是姨妈血我就觉得是不是有点恶心，但是总有变态想吃，想不出好的，那就一片浸过马桶水吧。 首先马桶水里的应该是少量粪便，大量大肠杆菌，少量洁厕剂，大量尿素，和占99.99%的水。泥土呢是包含一堆无机物，植物的枯枝落叶、动物的排泄物和残骸，要我选我一定选泥土，吃土就吃土嘛。<br><a id="more"></a><br>其实我想说的是泥土一点也不脏，就像你不能指着一个下地干活的农民脏一样，泥土是养育我们的来源，是地球的血和肉。<br>那么就有人说马桶水你也不能说脏啊，屎是你自己拉出来的，大肠杆菌还住你身体里呢，泥土中不也有屎吗？<br>确实是，说的有理，我觉得没东西在物质上是脏的，只是你心里或者你的身体能否接受罢了。小时候我觉得别人口水很脏不会吃或碰别人吃过的东西，虽然在细菌数量上看嘴巴确实比肛门脏多了，但是你的免疫系统可不止这一丁半点的厉害，只要是心里接受了，别人还嫌你脏呢。<br>屎这种东西真不好说，我现在还有点恐惧这玩意儿，我想不出有多大勇气的人才能向平民窟中的百万富翁中的主角为了签名跳入屎堆里，<br>我想象不出有多大勇气的人才能在猜火车中那么脏的厕所里把手塞进马桶里找东西，可能我就是那个温室里的花朵吧。这算心里缺陷吗？<br>说不好，其实我觉得我蛮可怜的，这么在意屎。墨菲定理就别了吧。</p><p>垃圾场脏吗，大地脏吗，地球脏吗？<br>妓女脏吗，AV女优脏吗？<br>空气脏吗，世界脏吗？<br>生殖器脏吗，肛门脏吗？</p><p>只要心里过不去，什么都是脏的吧。</p><p>人心就不一样了，有些人脏的可怜啊！<br>古人所说的正人君子在现在又有多少呢，是个人都有小人的一面吧，世人慌慌张张不过图碎银几辆。</p><pre><code>黄占杰2018/2/10</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;脏&quot;&gt;&lt;a href=&quot;#脏&quot; class=&quot;headerlink&quot; title=&quot;脏&quot;&gt;&lt;/a&gt;脏&lt;/h2&gt;&lt;p&gt;这是我自己写的第一篇随笔纯手打无草稿意识流。&lt;br&gt;今天洗车的时候在想，脏的定义是什么，泥土，还是细菌。车因为泥，它脏了，人因为什么才会脏。&lt;br&gt;我又想起我看过的一个视频一个清华的用微积分解释了一片薯片掉在地上有没有脏，结果说什么曲面掉在地上与地面接触是直线，在微积分里一条直线的面积是0，所以薯片没脏。可能我们吃的不是同一种薯片吧，他吃的薯片掉地上之后竟然不会来回滚，而是直线落地不动的。回到洗车。在洗车的时候我想一个问题：“两片薯片，一片全是泥土，一片全是姨妈血，你必须额吃一片，你吃啥？”&lt;br&gt;说是姨妈血我就觉得是不是有点恶心，但是总有变态想吃，想不出好的，那就一片浸过马桶水吧。 首先马桶水里的应该是少量粪便，大量大肠杆菌，少量洁厕剂，大量尿素，和占99.99%的水。泥土呢是包含一堆无机物，植物的枯枝落叶、动物的排泄物和残骸，要我选我一定选泥土，吃土就吃土嘛。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://onceonmydoor.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>充满恶意的埋伏(九号秘事)</title>
    <link href="https://onceonmydoor.github.io/2018/02/08/%E5%85%85%E6%BB%A1%E6%81%B6%E6%84%8F%E7%9A%84%E5%9F%8B%E4%BC%8F-%E4%B9%9D%E5%8F%B7%E7%A7%98%E4%BA%8B/"/>
    <id>https://onceonmydoor.github.io/2018/02/08/充满恶意的埋伏-九号秘事/</id>
    <published>2018-02-08T12:45:37.000Z</published>
    <updated>2018-02-08T12:48:32.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="九号秘事第二季"><a href="#九号秘事第二季" class="headerlink" title="九号秘事第二季"></a>九号秘事第二季</h3><p>如果你是第一季的粉丝，第二季必是充满期待，但是很多人期待的是反转，是脑洞，那么这一季可能要让大家失望了。<br>首先，需要清楚的是，九秘的反转基于的是颠覆人们的善意，把恶推到极致，看完后，让人背后一阵寒意。所以它的实质是黑色幽默式的讽刺剧。剧中的人物都不是大奸大恶之人，以“平凡之恶”洞悉人性。<br>其次，九秘多以群戏展开。在短短的半小时内，不仅突出了人物个性，也以个性推动剧情，反过来剧情再次转变人性，这是标准的故事架构，但是说来容易，写来却并非易事。好在，人家有莎士比亚。<br>最后，细节的使用也充满了（恶）趣味。第一集中去参加婚礼的妇女的高跟鞋（看了的人都知道）；第三集中处理女巫的刑具；第五集里过生日的姥姥收到的贺卡祝福。信手拈来，着实有趣。<br>我最喜欢的应该是第一集，当然第一季的第一集也是惊艳之作。<br>第一集让我兴奋的点很多。封闭空间－车厢，出场人物－7个，在半小时内，7个人在拥挤的火车车厢里会发生什么精彩的故事？<br>随着人物的逐一登场，发现他们各个之间彼此看似毫无关联，但因为主人公一直想睡觉，所以不得不和依次进车厢的他们发生对话。在这对话中，知道了他们的职业，也得到了几个重要的信息点，为尸体的出现和反转做铺垫：1）夫妇发现醉汉睡错了地方；2）醉汉语言粗鲁，让人讨厌，无所谓睡哪里；3）夫妇要去参加女儿的婚礼，所以要按时赶到；4）主人公有一个重要的面试，所以不仅要早睡而且要保证火车按时到站；<br><a id="more"></a><br>第一个重要情节点：尸体出现了，大家对尸体的反应刚开始很惊讶，但是随着主人公的引导，不能因为尸体（某种意外）耽误事情让大家达成一致，来蹭睡的小伙子甚至和尸体一起睡着。参加女儿婚礼的夫妇俩，虽然妇并不认同这样做，但是也没有做出什么反应（虚伪的人性啊）。<br>第二个情节点：火车突然停了，妇不见了，好像前方发现了尸体。大家都很紧张，但紧张的意味是不同的。很快，证明虚惊一场。<br>最后的反转：这个尸体是被主人公杀害的，而且杀错了人，原来要杀的是醉汉。这里在开头其实就埋了伏笔，醉汉喜欢乱睡，而且粗俗的样子让人误会了职业。<br>简直是满满的都是讽刺啊，以貌取人，为利益不择手段，对他人的漠视，某种“键盘侠“的虚伪。<br>这让我想起东野圭吾的尸台社区，很像这一集中间的一段。<br>地址见：<a href="http://www.douban.com/group/topic/53449685/" target="_blank" rel="noopener">http://www.douban.com/group/topic/53449685/</a><br>第二集看到一些人觉得梗很老，圣经上说“太阳底下本无新鲜事”，这种温情的东西其实大抵确实都一样，生命是令人怀念的。但是这一集胜在结构和剪辑上，1）生命里有的不全是好的事情，那些痛苦，背叛在死亡面前都显得美好；2）惊悚的幻觉。前面适可而止的镜头，跳切和无缝的衔接剪辑，都让这个故事充满张力，为最后的反转结局做好铺垫；3）虽然我觉得他们不适合做温馨挂的东西，但是这一集的构思仍然值得我们的电影去学习。<br>第三集的特点是“以古讽今”＋“善良是个鬼”。一场中世纪的判决讽刺为了既得利益不择手段的人们，所有的人都非常丑恶，但是，其中唯一有良知的人当你觉得大快人心后，“啪”，你就被打脸了，小白兔才是“尼玛大boss”，那句“god save you“（类似），真是妥妥地讽刺了一把上帝。<br>第四集的监控器式镜头，到了结尾，你才知道这是为什么。有人说结尾反转生硬。我觉得并不是。其实铺垫做的非常到位。1）四个监控器模式，形式上的压抑感，里面去安慰别人的人每天坐在自己的小格子里，生存空间其实非常不适；2）开头随意的聊天说到某人离职的原因是受不了一天接了两个电话，都是自杀之类的。可见他们自己也承受了很多。这些志愿者一直不停地在更替，但是主管确一直在，可见他很有可能心理已经有问题了；3）主管和职员（不听话）发生冲突后，排挤走了职员，可见其控制欲是很强的。所以他最后的心理变态是情理之中的。这一集把现代人的压抑和无助用帮助别人的安慰热线里的这群人的故事表现出来，绝对是相当讽刺的。<br>第五集的中产阶级虚伪性在对话里不断爆发。整体保持了人物个性突出，情节推动意外的优点。因为酒醉说出真话，引发的一连串事件。贺卡的那一段话奶奶念了三遍，开头（某种预言）；中间（叙事发展）；结尾（总结性质）。很有技巧的一个小道具。<br>第六集加了非现实的因素，不是很喜欢。讽刺效果是有的，但是一般。</p><p>这部剧的电影感非常强，而且故事又独立，所以完全可以当作6个短片来看。<br>最后，人性的黑洞是永远值得探索的，以一种戏剧化的形式洞悉人性，才是具有艺术性，值得斟酌和思考，否则就是一条只能保持一天热度的新闻，消失于天际。就这一点而言，九号秘事是绝对的典范。</p><p>作者：书羽流（来自豆瓣）<br>来源：<a href="https://movie.douban.com/review/7522473/" target="_blank" rel="noopener">https://movie.douban.com/review/7522473/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;九号秘事第二季&quot;&gt;&lt;a href=&quot;#九号秘事第二季&quot; class=&quot;headerlink&quot; title=&quot;九号秘事第二季&quot;&gt;&lt;/a&gt;九号秘事第二季&lt;/h3&gt;&lt;p&gt;如果你是第一季的粉丝，第二季必是充满期待，但是很多人期待的是反转，是脑洞，那么这一季可能要让大家失望了。&lt;br&gt;首先，需要清楚的是，九秘的反转基于的是颠覆人们的善意，把恶推到极致，看完后，让人背后一阵寒意。所以它的实质是黑色幽默式的讽刺剧。剧中的人物都不是大奸大恶之人，以“平凡之恶”洞悉人性。&lt;br&gt;其次，九秘多以群戏展开。在短短的半小时内，不仅突出了人物个性，也以个性推动剧情，反过来剧情再次转变人性，这是标准的故事架构，但是说来容易，写来却并非易事。好在，人家有莎士比亚。&lt;br&gt;最后，细节的使用也充满了（恶）趣味。第一集中去参加婚礼的妇女的高跟鞋（看了的人都知道）；第三集中处理女巫的刑具；第五集里过生日的姥姥收到的贺卡祝福。信手拈来，着实有趣。&lt;br&gt;我最喜欢的应该是第一集，当然第一季的第一集也是惊艳之作。&lt;br&gt;第一集让我兴奋的点很多。封闭空间－车厢，出场人物－7个，在半小时内，7个人在拥挤的火车车厢里会发生什么精彩的故事？&lt;br&gt;随着人物的逐一登场，发现他们各个之间彼此看似毫无关联，但因为主人公一直想睡觉，所以不得不和依次进车厢的他们发生对话。在这对话中，知道了他们的职业，也得到了几个重要的信息点，为尸体的出现和反转做铺垫：1）夫妇发现醉汉睡错了地方；2）醉汉语言粗鲁，让人讨厌，无所谓睡哪里；3）夫妇要去参加女儿的婚礼，所以要按时赶到；4）主人公有一个重要的面试，所以不仅要早睡而且要保证火车按时到站；&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://onceonmydoor.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>西红柿牛腩汤</title>
    <link href="https://onceonmydoor.github.io/2018/02/03/%E8%A5%BF%E7%BA%A2%E6%9F%BF%E7%89%9B%E8%85%A9%E6%B1%A4/"/>
    <id>https://onceonmydoor.github.io/2018/02/03/西红柿牛腩汤/</id>
    <published>2018-02-03T11:56:57.000Z</published>
    <updated>2018-02-03T12:08:38.874Z</updated>
    
    <content type="html"><![CDATA[<p>文/风雪之人</p><p>《写给女儿的食记》</p><p>牛肉，是我们常吃的肉类之一。来源可以是奶牛、公牛、小母牛。牛的肌肉部分可以切成牛排、牛肉块或牛仔骨，也可以与其他的肉混合做成香肠或血肠。</p><p>其他部位可食用的还有牛尾、牛肝、牛舌、牛百叶、牛心、牛脑、牛肾、牛鞭等，牛骨还可用做饲料。</p><p>牛肉是世界第三消耗肉品，美国、巴西和中国是世界消费牛肉前三的国家。</p><p>这也难怪，就拿我们家来说，每次炖三斤牛肉，爷俩用不了两天就吃没了，当然还有别的搭配着吃的。我惯常的做法有红烧、炝炒，和炖汤。儿子最爱吃的做法是西红柿牛腩汤，所以我先说说这个。</p><a id="more"></a><p><img src="/img/1.2.jpg" alt=""><br>我的这个做法是经过很多种做法之后，保留下来的最适合儿子口味的做法，计较简单。</p><p>先说材料吧，我一般在超市买科尔沁草原的牛肉，都是两岁阉割的五百公斤以上的公牛，老公和儿子都说这个肉口感好，我觉得差别不大。</p><h3 id="材料："><a href="#材料：" class="headerlink" title="材料："></a>材料：</h3><p>牛腩、西红柿、葱、姜、芥末、茶叶、白酒<br><img src="/img/1.3.jpg" alt=""></p><h3 id="做法："><a href="#做法：" class="headerlink" title="做法："></a>做法：</h3><p>1、炖肉前一天，用芥末稍微在肉面上抹一下，用保鲜膜裹好，放冰箱冷藏。炖肉前，用冷水洗干净，这样不仅熟得快，而且肉质鲜嫩。</p><p>2、冷水下锅，把肉焯一下水，水开后两三分钟即可捞出来，用温热水冲洗。</p><p>3、焯肉的时候，把西红柿去皮，切块，放入高压锅内，接点水，汤的多少随意，能没过肉就行。</p><p>4、将少许茶叶用纱布包好，还有大葱，一片姜，放入洗好的牛肉，茶叶可以使肉熟得快，味道清香。</p><p>5、加些白酒或醋（1公斤牛肉放2-3汤匙或1-2汤匙醋）炖牛肉，也可使肉软烂。</p><p>6、在肉锅中放几个山楂或几片萝卜，既熟得快，也可除异味。</p><p>7、高压锅炖一次之后，再倒入砂锅，旺火，揭开锅盖炖20分钟。然后盖盖，改用微火炖十分钟，使汤面上浮油保持温度，起到焖的作用。</p><p>8、关火前放入盐，撒上香菜即可。如果大人喝，就来点胡椒面，那味道，真是美！<br><img src="/img/1.4.jpg" alt=""></p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><p>1、炖牛肉要使用热水，不要加冷水。热水可以使牛肉表面蛋白质迅速凝固，防止肉中氨基酸外浸，保持肉味鲜美。</p><p>2、牛肉的纤维组织较粗，应横切，将长纤维切断。不能顺着纤维组织切，否则不仅没法入味，还嚼不烂。</p><p>3、老牛肉肉色深红，肉质较粗；嫩牛肉肉色浅红，肉质坚而细，富有弹性。<br><img src="/img/1.5.jpg" alt=""><br>我做饭是比较喜欢清淡的，我尝试过放油炝锅，先炒番茄酱和西红柿的那种做法，但最后成品就是烂烂的一锅，口感较重，在不断地实践中，终于形成了固定的做法，也是被家人最认可的方法，尤其是儿子。</p><p>这就是一碗汤的由来，它的形成，浓缩的是做饭的人对吃饭的人全心的照顾，也是亲情具体的体现。大千世界，亲情无处不在，它可能躲在温馨的小屋里，可能匿于关怀的电话中，可能藏在细细的眉眼间，也可能就是妈妈端给你的一碗汤……</p><p>作者：风雪之人<br>链接：<a href="https://www.jianshu.com/p/ab4e49778af2" target="_blank" rel="noopener">https://www.jianshu.com/p/ab4e49778af2</a><br>來源：简书</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文/风雪之人&lt;/p&gt;
&lt;p&gt;《写给女儿的食记》&lt;/p&gt;
&lt;p&gt;牛肉，是我们常吃的肉类之一。来源可以是奶牛、公牛、小母牛。牛的肌肉部分可以切成牛排、牛肉块或牛仔骨，也可以与其他的肉混合做成香肠或血肠。&lt;/p&gt;
&lt;p&gt;其他部位可食用的还有牛尾、牛肝、牛舌、牛百叶、牛心、牛脑、牛肾、牛鞭等，牛骨还可用做饲料。&lt;/p&gt;
&lt;p&gt;牛肉是世界第三消耗肉品，美国、巴西和中国是世界消费牛肉前三的国家。&lt;/p&gt;
&lt;p&gt;这也难怪，就拿我们家来说，每次炖三斤牛肉，爷俩用不了两天就吃没了，当然还有别的搭配着吃的。我惯常的做法有红烧、炝炒，和炖汤。儿子最爱吃的做法是西红柿牛腩汤，所以我先说说这个。&lt;/p&gt;
    
    </summary>
    
    
      <category term="美食" scheme="https://onceonmydoor.github.io/tags/%E7%BE%8E%E9%A3%9F/"/>
    
  </entry>
  
  <entry>
    <title>太空里戴耳环的女人</title>
    <link href="https://onceonmydoor.github.io/2018/02/02/%E5%A4%AA%E7%A9%BA%E9%87%8C%E6%88%B4%E8%80%B3%E7%8E%AF%E7%9A%84%E5%A5%B3%E4%BA%BA/"/>
    <id>https://onceonmydoor.github.io/2018/02/02/太空里戴耳环的女人/</id>
    <published>2018-02-02T08:17:07.000Z</published>
    <updated>2018-02-03T11:53:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>“这地方怎么样？”男人对秦红艳说，他很认真在问她的意见。</p><p>“很漂亮。”可她似乎不为所动。</p><p>明快的白色客厅没有多余的家具，只有围成环形的米色矮沙发和黑色躺椅，中间的地板铺着黑白方格地毯，一张古色日式茶几，其上一钵开出六株低垂脑袋的黄色小花蕊的白水仙、紫色的圆形小盒子和金色的方形小盒子，正对着朝东南向的落地窗，其中一扇窗可以打开进入外面的院子；靠近躺椅头部位置的墙角放置一盏伞状的台灯以及一弯鹿角模样的木制装饰物。西南的墙面有十六排白色书架，在书架前面有一个可供移动的扶梯，固定在书架顶部的圆杆。白色书架的顶层和中间层摆放着严严实实的书籍，低层的架子两侧放着音响装置，中间零散放着CD和工具书，还有一些看上去不太搭调的东西——福袋、钥匙、空酒瓶（轩尼诗李察）、堆叠起来的青玉色小茶杯、无线鼠标以及可往外伸展的照明灯支架。书架对面的墙面有一部分稍微凹进墙体，嵌着三行木架子与眼睛齐平（空着，第三层放着一幅头发蓬乱扎起来的裸体少女的钢笔画以及一个支起来的照片框，是同一个女人的？），旁边没有凹进去的空白墙面挂着飞镖盘，上面有六枚红黄色的飞镖。</p><p>男人介绍说这是按照时下流行的斯堪的纳维亚简约设计理念装修的房子，是经由外国设计师“思考”出来的作品。她仅仅对外国人表示赞叹，她并非第一次进入装修别致的高档排屋，她去过别的有钱男人的家。来到三楼男人卧室的阳台，隔岸灯火距离恰到好处，并不刺眼，反而在点缀夜色。渔业船舶检验局就建造在临江一带，夜里大门紧闭，黑黢黢的建筑物在水面上静悄悄的，警备巡逻船停靠在公家的码头，能隐约听到船身与潮水拍击的动静。这幢排屋的位置选得很好，沿江，却又与江边的公路隔上一层别的排屋，视野没有因此被妨碍，更难得的是，夜间飞驰的车辆，嘈杂的声音传到这里，已经刚好成为增添夜色动人的窸窣之音。<br><a id="more"></a><br>“这里真不错。”她回头对男人说。</p><p>男人自信地走近她身边，温柔地搂住她的腰。</p><p>“你想要住在这里吗？”这不是他第一次问她。</p><p>她并非不懂得他的心意，又重复他们之间已经发生过很多次的对话。</p><p>“可我是那种女人呀。”</p><p>这一次他并没有继续说以前那些讨好她，他认为足够动听的话。</p><p>男人掏出一个紫色的小礼盒，并没有直接回答她的话：“你说过可以从一个男人送给你的耳环来判断他。我很嫉妒那些送你耳环的男人。”</p><p>她打开礼盒，是一对精致的蓝宝石孔雀耳环，很典雅。可她并不喜欢。</p><p>她笑着对他说，“你帮女人戴过耳环吗？”</p><p>“除了你，我不会给任何女人戴耳环。”</p><p>她示意他这么做。他的动作生硬，可他很有耐心地控制自己的手指，温柔地摸索着她的耳洞。好不容易帮她戴上耳环，她就把嘴唇轻盈地贴上他的嘴唇，是充满鼓励的湿吻，她巧妙地把男人的舌头引到她的嘴里，跟她的舌头缠在一起。男人认为她打算接纳他了。</p><p>可她只是在回报他的用心，用身体回报他。</p><p>沿江公路的车辆偶尔喧腾的往来，在传达被夜色驯服的适宜的辅音，刚好能够盖过男人与女人之间亲密的动作。他们就在靠近阳台的卧室软沙发上面做爱。她的身体在回应他，而她自己也似乎很有感觉。她抱着男人，做出许多温柔的尝试，那对蓝宝石孔雀耳环令她更加动人，他的兴致高涨，认为自己更加具有男性的气概，他有信心去征服她，还有别的事情。</p><p>男人动情地问她情话，手掌托住她发热的面庞，不让她躲开他热烈探询的眼睛。</p><p>她没有回答，而是迎向男人，让他进入到更柔软的地方。</p><p>深夜，男人已经安稳地睡过去。她没有睡着，在别人的家，多舒适的床铺，她都没法轻易睡着。她坐在床上，看着男人起伏的鼻钩，尽管跟他相识已有一段时间，也像朋友一般私下里约会，可心里仍是只把他当作客人。他和她是在名为“龙宫”的地方认识的。对这座城市稍有了解的男性，都会知道“龙宫”，龙宫里的女人就是藏在这座城市深处的奇珍异宝。这半年多来，男人有意要更进一步，可她却连男人的名字都还不知道呢。他问过她的名字，他说要知道她的真名，不是“龙宫”给她的假名，她没有隐瞒，很大方地告诉他，还有家里人怎么叫她，她都在床笫之欢的间余当作可笑之事跟他说起过，她对掩饰自己的身份这种事并不在意。可她却没有问他的名字。他和她之间一直以你我相称，现在想起来，总觉得对他不算厚道。</p><p>她见过很多男人，用场子里那些下作的话来说，她见过的玩意，吃进嘴里去的，比男人一辈子自渎的次数还要多。第一次见到这个男人，她并没有留下特别的印象，他的五官并不出众，话也不多，也不像别的年轻男人要迫切地实现欲望。男人每次来这地方找她，主导的总是她，他很愿意让她带领他去完成那些不便言说的技巧，大多数男人把这些技巧称为服务，是他们的女朋友或者妻子无法提供的下流的服务。成为她的熟客之后，他告诉她，男人也会害臊，一旦要强迫他把具体的欲望说出来，这些技巧会完全失去意义，仅仅就是下流了。他笑着说他需要一点下流的雅兴。他并不是最常来找她的客人，有比他更想要与她做爱的男人，当然，也有比他对她更好的男人。她记得他的印象，就是他颇有城府与稳重的鼻钩，以及他很有分寸的举止，在性爱方面，也是如此。之前男人从没有表现出要得到她的样子，可自从她开始戴耳环之后，她发现有好多客人的态度变了，男人就是其中之一。男人变得比以前对她更用心，而且更在意她对他的看法。然后在这半年，他和她已经发展成私下里的朋友关系，他和她出来约会，然后回到他家里，不再通过“龙宫”来完成交易。</p><p>她戴上耳环之后，的确变得更有天赋。她从不主动要求，但是他第一次开车出来接她，她就跟他说想试试开车。他以为她在开玩笑，等她把驾驶证拿出来给他看，他才感到有些吃惊。他同意让她开车。在这半年里，每次都是他开车来接她，然后再换她开车回去。他开始让她填补自己的生活，而她对这座城市也越来越敏感，并且她的敏感能够首先迎合他。他给予她很多方便，而她在他身边进化的速度惊人，她很感激他，会愿意尽力满足他，仅此而已。</p><p>“我是没有感情的吗？”</p><p>她赤脚站在阳台上面，披着男人过于宽大的丝绸睡衣，裸露着身体。天空黏糊糊的，混杂各种并不相融的光雾，恒星淹没其中，月色并不动人。</p><p>“如果我生在太空，会不会是更有感情的人？”</p><p>她很少会去想关于太空的任何事情，她的见识没有那么远，接受的教育仅仅让她听说过太空这个并不属于她的词汇而已。真正告诉她太空的，是她的客人，其中一个就是这个男人。他告诉她太空在地球以外，具体就是大气层以外的宇宙空间，比任何地方都要广阔，是她无法想象的，也是他无法解释的地方，那里是科学存在的意义。她听不懂科学，却能看懂男人自大的表情，也就不再追问。既然太空比科学更遥远，就不是她够得着的东西。可她仍然想知道更多关于太空的事。</p><p>“阿弟去你那边打工了，你有空就去看看他。他不满意家里给他安排的相亲对象，跟他爸吵起来，一气之下就跑出去打工了。你有他的电话号码吗？”</p><p>下午的时候，母亲打电话过来，没有过问秦红艳的近况，直接就说弟弟的事。她心里别扭，却也答应母亲会去看看他。大姐已经结婚，不再管家里的事，就连家里给弟弟准备结婚的房子，母亲也是光问秦红艳出钱。她一句抱怨的话也没有说。</p><p>“没有。你把他的号码发给我。”</p><p>“他现在也去学赌钱，跟他父亲真是一样的坏种。我说他，他还骂我。他跑出来也好，打工赚钱，也比在家里不成个人样好。”</p><p>母亲反反复复地抱怨，秦红艳也有些烦了。她不怎么关心弟弟，她跟家里的男人都不亲近。父亲根本不管她，他对家里哪个人都不管不问。男人会赚钱，女人就不准说三道四。父亲在家里过一种生活，在外面也过一种生活，秦红艳看不过父亲这么对家里的女人。她顶撞过他，他发起怒来就把她的头往墙上砸，母亲和大姐拦住父亲，嘴里却碎碎叨叨责怪她顶撞父亲。弟弟看着她被打，竟然不帮忙拦住父亲，事后笑她蠢。</p><p>母亲用微信给秦红艳发过来两张家乡的照片。一张是新铺的二级公路，雪白雪白的，像刚下过雪，上面其实是一层白色的细沙；另外一张是新建的基督教聚会堂，有个穿着白衬衣，瘦削高挑的男人站在花园里，背对着拍照的人，望向附近那些低矮又没意思的群山。这算是家里的大事了。</p><p>据说在更早的年代，在解放前，或许更早，有法国人翻山越岭从越南那边到这个地方传教。秦红艳不知道祖辈们怎么称呼那些法国人。不过她倒是知道该怎么称呼“住在山里的”黄皮肤苗人，祖辈们把苗人叫做“巴内”，这个词汇的音义有鱼、钻在泥里以及脏兮兮的的意思。</p><p>苗人信天主。秦红艳曾经在本地的门户网站见过一组政府扶贫办的工作人员发出来的照片，标题就叫做“苗族青年的天主教婚礼”——跟电影里面那些老外在教堂里举办的婚礼可真是天壤之别。在破败昏暗的泥屋子里进行，穿戴的都是苗人的传统服饰，那种古老复杂的装束，看起来既隆重，又寒酸。秦红艳从小就对信教不感兴趣，不管是基督教、天主教，还是道教（家乡意外地没有佛教），印象里那些中年人要么穿着一身整洁干净的白袍套着西装，要么穿着脏兮兮沉暗又花哨的道袍，也许还会有一头舞狮，跟着锣鼓，看起来又笨又丑。</p><p>母亲是在大姐结婚、而她离开家乡常年在外面以后才信的基督，那时候秦红艳跟父亲已经吵得不可开交。她跟弟弟表面上互相不搭理，可其实厌恶对方的本性，一旦有人越界，就会爆发战争。是的，战争，跟生存以及尊严有关的战争，无法调停。去教堂能够让家里平静下来。母亲去教堂里抱着圣经喃喃自语，没人知道她在祈祷什么，还是要忏悔什么。秦红艳陪母亲去过教堂，她惊奇地发现母亲竟然能够背诵赞美诗。母亲跟教友在一起参加晨祷、晚祷，组织唱诗，为别的教友的婚礼彩排活动，募捐。母亲又恢复了平静，重新接受宿命，逆来顺受。</p><p>母亲突然换另一种语气，悄悄地问她，“给你介绍的对象聊得好吗？”</p><p>“哪个对象？”</p><p>“统计局那个。”</p><p>哦，那位统计局先生啊。母亲那么战战兢兢，她以为她的小女儿在恋爱方面跟她和大姐一样是个笨蛋吗？至少，她不愿意像母亲和大姐那样，被安排到婚姻的角色里面。</p><p>父亲为人倨傲，在工作方面，甚至在家庭生活之中，他从不在与人的感情关系里做多余的事。后来秦红艳才明白其实是母亲从不肯屈就父亲，慢慢地就让父亲疏远她们。在秦红艳看来，母亲比别的女人漂亮，也要比她们高大，更加精力充沛，总是不动声色地接近时尚。母亲在单位里常常在不同的男人身边周旋。她不是那种会害羞的女人，但她会故作害羞，在别的男人面前，那是一种类似于应酬的表演，以至于有时会让秦红艳都感到迷惑。她对父亲就很少会这么做。她对待父亲用的是她本身的性格。母亲的性格倾向于控制，对她身边熟悉的人和事的控制，她擅长社交生活，在其中处理各种事务总是干脆利落。也因此她成为同事与亲戚的中心，人们都愿意接近她，依赖她。她从不觊觎那些她无法控制的好处，但她不能原谅自己建立起来的稳定生活发生任何差错。</p><p>没人能看得出父亲倨傲的个性里藏着对情欲方面的渴望，他是要求母亲要屈服于他的情欲的。母亲在别人眼里是漂亮贤惠的女人，可在父亲那里，她的漂亮贤惠却是一种折磨，一种近在咫尺却不可用的折磨。父亲渴望母亲能用那种被误解的传统想象里女性该有的’温柔’的性格来对待他的情欲，或者说理解他的“情趣”。可母亲实际上是一个比父亲更加没有“情趣”的人，以至于后来这种渴望一度成为两种性格之间的对抗，好在他们两个人都是“传统”的夫妻，让秦红艳避免了一场过早分裂的危险。</p><p>发现父亲可能出轨后（母亲竟然会偷偷地看父亲的手机短信），母亲变得神神叨叨，经常怀疑，而且极不自信，看起来整个人都失去了重心，方寸大乱又不敢把话挑明。她把这种错误转投到孩子身上，想要通过他们来获得补偿。母亲变得过分关心他们，而且黏人，特别是把秦红艳当成倾诉的对象，把她心里的委屈、对父亲的怨恨都一股脑地丢给她，也不管她是否愿意承受。</p><p>她都快忘记他了。母亲还以为她还在跟他谈呢。母亲真是太不理解自己的孩子了。统计局先生没有跟她见面之前，每次给她发消息，都会充满正能量地介绍他在统计局的工作以及他在本地投资的装修设计公司的生意两方面都蒸蒸日上。另外，他还兼任政府扶贫办的下乡访问工作，他的朋友圈总是有他不失体面，带着表格与扶贫物资下乡跟那些脏兮兮的贫穷男人和小孩子亲近的照片。不过母亲在饭桌上说起一件在当地流传的扶贫工作的笑话，秦红艳就不再对这些扶贫工作感兴趣了。母亲说，政府扶贫办的人下乡送两对山羊给那些贫穷的少数民族人家，打算让他们养殖生产。那些少数民族平时根本没有钱吃得起山羊，结果那两对山羊没能繁殖更多的山羊，就在当天被宰了，做成香喷喷的羊肉，分给那些扶贫办的工作人员一起吃。所有人都皆大欢喜。</p><p>统计局先生还告诉她，他也在读村上春树的书，《挪威的森林》、《太阳以西》，还有别的她已经想不起来的书名。他好像以为在大城市里奔波的女孩子都会知道村上春树，而他就有必要读村上春树。他兴致勃勃地说他从村上春树的书里学到很多知识，比如懂得了很多时下流行的牌子，还从村上春树的书里知道成熟的都市丽人该是怎么样的打扮。</p><p>等到他们第一次见面，他就跟秦红艳说，她很像村上春树描写的女人。</p><p>她问他，是怎么样的？</p><p>“完美、知性，跟别的女人不一样。”然后他开始郑重其事地说，“我很在乎女人的纯粹性。既然肉体的纯粹性已经变得可笑，而且对女性来说，是一种伤害和不尊重，那么我选择追求精神上的纯粹性。我不能追求一个毫无纯粹性的女人，这是我的权利，我不会让步。”</p><p>“我听不太明白你说的话。”</p><p>“不，你明白我说的话。”</p><p>“为什么？”</p><p>“我知道。我有这种眼力。我虽然不是有长相的男人，可也还算讨女人喜欢。我不想对你隐瞒，也不是要以此证明自己有能力，我拒绝过几位漂亮的女性，至少不比你差。我说给你听，是想要告诉你，你是我愿意得到的最好的女人。”</p><p>他对她很满意，并提出去看场电影，刚出的《比利林恩的中场战事》，李安的文艺大片，120帧3D新技术，能有身临其境的临场效果，你一定喜欢。统计局先生自信地说，他说话的语气就像不容人反驳的领导。</p><p>可他还没当上领导呢。她尽量迁就他，没有提醒他，他已经出丑了。看完电影，他送她回家，并提出下一次见面。秦红艳没有当面拒绝他，不过她已经决定不再跟他见面。</p><p>街灯浸透湿度的光温柔颓丧，返航的班机发出低沉的信号，越来越近，这种来自高处的长音，让秦红艳感觉太空在退潮，跟她越来越近。</p><p>她想起另外一种关于太空的说辞。那是另一个男人对她说的，她认为那种说辞太软弱，也就不会同意。那个男人说太空只够容纳男人和女人的伤痛。他说这话的时候看起来非常卑微，那并不是女人该喜欢的男人的样子，她并不赞同。</p><p>“你是我见过最适合戴耳环的忧愁女人。”</p><p>“是吗？我看起来是忧愁的女人？”</p><p>“是啊。成熟的忧愁女人。难道没有人发现这一点？”</p><p>“那你是怎么发现的呢？”</p><p>“你从来都不会抱怨。不会抱怨的女人，那只能说，她把内心的想法都压在心里，不告诉别人。”</p><p>秦红艳把他的脸拉过来，亲在他的鼻子上面。她同意并允许他这么说。</p><p>“总有很多话总没法和其他人说。”</p><p>“你和我说，是因为我们有肌肤之亲吧。”</p><p>男人把这当成鼓励，开始不厌其烦地谈及自己的过往以及内心那些奇怪的想法。她喜欢听他聊起家里的事。聊起他的父亲和母亲，以及他们之间的争吵。然后，他和她就像两个旁观的小孩子，互相分享自己父母亲那些不可理喻的举动。</p><p>“那你是站在父亲那一边还是母亲那一边？”</p><p>“为什么非要站在哪一边？难道不该是谁对就站在谁那一边？”</p><p>“那得看你像谁了。如果你长得像母亲，必然会厌恶母亲；如果你长得像父亲，必然会跟他作对。”</p><p>“你怎么会这么想？”男人惊讶地看着她，佩服地轻轻掐她的鼻子。</p><p>“这是我自己的经验。”</p><p>“你这么一说，其实我挺像我的母亲。我父亲对她不好，可我不知道为什么反而讨厌母亲。特别是她给予我同情的时候，我会无缘无故地生起气来，心中一团无名火。”</p><p>她也温柔地掐他的鼻子。</p><p>“对我来说，故乡是一种诱惑，你会觉得它什么都是好的，什么都是对的。在那些泥泞、混乱的日子——母亲跟父亲吵得不可开交的日子。我每天都在逃跑。最后我逃到河滩。在一片蒹葭苍苍的河滩。在仿佛与世隔绝的午后。我看到钓鱼少年抛竿，静静地站在河滩。在海岸线右侧的红树林，更加隐蔽、还要往上的一片浅滩处。那种日子，我以为一生中只会碰到少数几次，与你所经历的平常日子没有多大不同。可我有一种无法言喻的喜悦。那种安静、缓慢、俊逸、游刃有余、与世无争，都发生在干净的画面里，发生在一个心无旁鹜抛竿的钓鱼少年身上。你能想象在他身上凝聚了故乡所有古老的记忆。钓鱼少年不大说话，看起来穷苦邋遢，却简练得像神话传说里的美少年；他跟年龄极不相称地老练，跟你解释钓鱼这项游戏时那种纯粹的、在技艺上的愉悦，就像在传授某种遥远的智慧。”</p><p>夸夸其谈。他甚至忘记了他和她现在可是赤身裸体地躺在酒店舒适的房间里呢。她羡慕他的夸夸其谈里的故乡，她羡慕他能够邂逅一位充满光明的钓鱼少年。他的故乡，变成她想要在心里想象的故乡。她能够想象，五月份的时候，即使雨水与艳阳仍未到来，明亮的天气已经足够让他的故乡成为南方。</p><p>秦红艳欣赏的他的伶牙俐齿。她愿意去想象他的故乡，但她绝不会像他那样迁就自己的故乡。就像她不会再迁就她的父亲或者弟弟。她也不会迁就母亲，迁就她的教导，就像大姐那样，继续重复在母亲身上行将耗尽的“传统女性”，把自己局限在那个空洞的、叫做“故乡”的词汇所承载的记忆里。对她来说，那足以令她尴尬。</p><p>返航的班机消失后，秦红艳感觉有点凉。她走到楼下想找温水喝。餐厅那里有个小吧台，她发现架子上面有威士忌。她从消毒柜里拿出玻璃杯，取下一瓶开过的山崎18年，往杯子里倒了1/3。楼梯的感应灯光熄灭了，她不想这么晚还把客厅的灯打开。小吧台的灯光类似于酒吧的效果灯，她选择了昏沉沉的黄色和蓝色。很快，她又倒了另外1/3杯的威士忌。然后，她倒了一杯温水。她的嘴已经变刁了，懂得哪些酒是好酒。可她从来不会过分去享受这些被认可为质量上乘的好东西。她懂得控制自己。这是一个过来人教会她的事情。</p><p>“你在看我身上的蜈蚣吗？”</p><p>“蜈蚣？”</p><p>“这是女人身上的报应。是不负责任的男人留下的报应。是每个男人都想留下的报应。这条蜈蚣会让别的男人嫌弃你。他们都怕这条蜈蚣，看到它，他们心里就发毛。”</p><p>说这话时，薛丹有一股子虚张声势的无畏，她在尽力让自己看上去不那么难堪。某天洗完澡，秦红艳发现薛丹腹部的正中央有一条像蠕动的怪虫一样的疤痕，在她身上是很严重的瑕疵，用浴巾擦干身体后，她就用特殊的贴纸遮盖住那条怪虫。</p><p>薛丹要往脸上抹洗面奶，可她在手上抹匀洗面奶的动作非常漫长，她想要不动声色地隐瞒这些令她在意的事。不是要隐瞒事情本身，而是隐瞒她自己，她不想让秦红艳知道她仍在忍受命运。</p><p>“不能去医院抹掉吗？”</p><p>“已经抹不去了。就跟身上的纹身一样抹不去了。不过这比纹身恶心得多。”</p><p>现在回想起来，秦红艳才发觉薛丹是那种身体很好很容易动情的女人。她的身体太容易有反应，这是她的缺点。她太容易带给男人那种交欢的愉悦。她的乳房摸上去比别的女人要温热，甚至在发烫。她是个容易发烫的女人。她的脸丰腴，眼睛眯得很小，身体匀称像唐朝妇人的土俑。她还是会感情用事。她努力排斥男人的方式反而让人觉得她很笨拙。她不懂拒绝那些扑向她身体的男人。尽管她要求自己要更加眼尖一点，不再受男人的骗。那条瑕疵就是她的教训。“孩子在胎里已经像个小老鼠那么大”，她毫无伤心地解释的时候是要告诉秦红艳，她是个绝不苟全的女人。她就像杀死自己孩子的希腊公主美狄亚。她把孩子杀死，也不会给那个抛弃她的男人留下种子。</p><p>薛丹比她大9岁，身上很香。秦红艳见到她后背上还有未完成的失败的纹身。她说纹身和蜈蚣就跟她的生活一样，想要抹去，却发现把皮肤洗得很脏，脏得连男人都不喜欢。尽管她的皮肤很白。她不喝酒，不抽烟，把自己的身子打理很香很干净，穿着浅蓝色的胸罩、无袖白衬衣和米色阔腿裤。她很干净。可肚子上面的蜈蚣和洗坏的纹身却很脏。</p><p>“我不能再去相信另外一个男人，因为我没办法让他相信我，结婚也没有用，这条蜈蚣会整天提醒他们，不能相信这个女人。他们心烦意乱。每个睡我的男人都怀疑我，然后只会用暴力去占有我。”</p><p>她时常想薛丹会嫁给家乡哪种男人？她跟薛丹说会去找她，她说好的。可秦红艳知道薛丹并不真的指望她会去找她。薛丹把她当作朋友，不愿意说实话伤她的心。而且秦红艳知道，自己是绝不愿意变成像薛丹这样的女人，她要避免走上跟她一样的命运。</p><p>薛丹告诉秦红艳，不要惦念她。她是那种哪里有条件做生意就往哪里走的女人。不会永远待在一个地方。而且薛丹说她会回家。回到那个要做农活的家。她在家里舂米、打谷的家。秦红艳握着她的手，她的手太纤细，已经不能再做农活。</p><p>“你睡不着吗？”男人也起床来到楼下小吧台。他看到秦红艳拿到小吧台上面的山崎18年，本想喝一点，犹豫了一下，倒了杯温水。</p><p>“是啊。还不太想睡。”</p><p>“是不是还在为那件事生我的气？”</p><p>“不会”，秦红艳往杯子倒了点威士忌，又说：“那几天是的。但现在我已经答应你了呀，梁杭。”</p><p>这是秦红艳第一次直接叫他的名字。她在架子上面一瓶百龄坛21年的标签右下角发现他的签名。她记得别人叫他梁总监，所以不会弄错。</p><p>梁杭也换了威士忌，跟她碰杯。他看起来很高兴。</p><p>在这之前，那个男人在旅行社上班，专门做港澳游。秦红艳跟她的几个姐妹都是他的客户，她们好几次去香港都是找他安排，他的业务能力不错。没有生意的萧条时期，他主动回访客户，联系上秦红艳，然后他就邀请她出来吃饭。</p><p>她对他挺有好感的。可他们的关系并没能维持很长时间。某一天，毫无预兆，梁杭把她和他约出来了。梁杭解锁了她的手机，看了她的微信。梁杭非常有礼貌地当着他和秦红艳的面，告诉他很多具体的细节，自己正在和秦红艳发展比较认真的关系的细节。“你必须跟她断绝来往，最好互相把对方的联系方式删除。”梁杭郑重地告诫他。当时的情况，骑虎难下。秦红艳也并没有下任何决心。</p><p>那个男人友好地跟她道别：“咱们就到此为止。以后去旅游也可以来找我，我会给你比别人更好的优惠。”</p><p>梁杭主动跟他握手，君子协议，没有任何冲突，也没有任何不满。他在梁杭面前好像失去了平时跟她在一起时那种敏锐的语言。他变得极其平常，令她失望。如果他能够再机智一些，再冲动一些，而不是那么彬彬有礼，那么轻易地跟她道别，她会不会做出别的决定？</p><p>在开车回去的路上，梁杭问她：</p><p>“你知道他已经结婚了吗？”</p><p>“知道。”</p><p>“他比我年轻多了，才30出头。对你并不合适。”</p><p>“我并不否认。”</p><p>“那就这样吧。”梁杭把右手温柔地放到她的手上。</p><p>回到房间，秦红艳看着并不安静的天空，有好多事情在她心中回溯，她觉得自己要想起很多事来，却只是一阵一阵袭来的寂静。她惊讶于自己怎么会这样镇定，或者说无动于衷。仿佛那些对她来说更加重要，却变得遥远的事物正在慢慢消失于太空之中。男人们常常佩服她的记忆力，还有她身边的人。可她越来越记不住很多以前的事，她只能记得住眼前的事。</p><p>梁杭又和她尝试做一次，但这一次没有成功。梁杭动情而温柔的抚摸并没有凑效，可他已经进入状态。秦红艳徒劳地配合男人，她想要控制身体去迎合男人，可她却尴尬地假叫出来，又马上明白自己犯了个非常不明智的错误。男人似乎也发现了。最后，秦红艳用“服务”帮助男人解决了。</p><p>“早点睡，也许今晚都挺累了。”梁杭的声音里有些严酷的东西，令她失去阵脚，她好像突然失去自信，非常艰难才说出一句充满温柔的话，“晚安，明天我开车送你上班。”</p><p>夜深了，她把耳环摘下来，也去躺在男人身边，闭上眼睛。</p><p>“温柔者福矣以其将得土也</p><p>哀恸者福矣以其将受慰也</p><p>灵心者福矣以天国乃其国也”</p><p>母亲常常念诵的祈祷词，就像数绵羊一样不断重复在她的耳畔。她不知道自己何时也能背下这段喃喃絮语，她一直都是不以为然的。她觉得还没有睡着，却不断地看到许多闯入清醒的转瞬而逝的梦境。在那种浅睡的梦里，她会频繁地听到一个陌生男人踩在沙石上的声音，这种声音从生活中各种庸常的声音里变化出来，就像被雨水渗透的脏苔藓，悄悄在她熟悉的生活周围化开，她并不是听到，而是陷入这种声音里面，毫无知觉。她听到那个陌生男人的脚步声疲惫、徘徊，那是一种与行动以及错误重复摩擦而产生的声音，那也是她自己的声音，同声相应，她与此契合。她察觉一些不寻常的变化，并不如她之前所想的那么轻松。等她拉住那个男人的时候，她发现是自己在回头看自己，那是她被飞鬼吃光内脏的过往，她吓了一跳。那个男人已经把她熟悉的另外一个女人的内脏吃光了。</p><p>在龙宫的时候，有个叫做宋瓴的女孩子给她说过飞鬼的故事。“飞鬼是猛鬼。”宋瓴告诉她，“这是比尖头水鬼更加凶狠的恶鬼。它钻入那些可怜的孩子们的肚子里，吃光他们的内脏，他们就死去了，也要变成飞鬼，继续去吃别的无家可归的小孩。”</p><p>她急切地喊母亲，可她喊不出声音，她看见母亲带着姐姐和弟弟，远远地走在别的地方，只留给她一盏忽明忽灭的灯。那个陌生男人喊出她的名字，她已经在流泪了。什么都无所谓。真的吗？</p><hr><p><img src="/img/3.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“这地方怎么样？”男人对秦红艳说，他很认真在问她的意见。&lt;/p&gt;
&lt;p&gt;“很漂亮。”可她似乎不为所动。&lt;/p&gt;
&lt;p&gt;明快的白色客厅没有多余的家具，只有围成环形的米色矮沙发和黑色躺椅，中间的地板铺着黑白方格地毯，一张古色日式茶几，其上一钵开出六株低垂脑袋的黄色小花蕊的白水仙、紫色的圆形小盒子和金色的方形小盒子，正对着朝东南向的落地窗，其中一扇窗可以打开进入外面的院子；靠近躺椅头部位置的墙角放置一盏伞状的台灯以及一弯鹿角模样的木制装饰物。西南的墙面有十六排白色书架，在书架前面有一个可供移动的扶梯，固定在书架顶部的圆杆。白色书架的顶层和中间层摆放着严严实实的书籍，低层的架子两侧放着音响装置，中间零散放着CD和工具书，还有一些看上去不太搭调的东西——福袋、钥匙、空酒瓶（轩尼诗李察）、堆叠起来的青玉色小茶杯、无线鼠标以及可往外伸展的照明灯支架。书架对面的墙面有一部分稍微凹进墙体，嵌着三行木架子与眼睛齐平（空着，第三层放着一幅头发蓬乱扎起来的裸体少女的钢笔画以及一个支起来的照片框，是同一个女人的？），旁边没有凹进去的空白墙面挂着飞镖盘，上面有六枚红黄色的飞镖。&lt;/p&gt;
&lt;p&gt;男人介绍说这是按照时下流行的斯堪的纳维亚简约设计理念装修的房子，是经由外国设计师“思考”出来的作品。她仅仅对外国人表示赞叹，她并非第一次进入装修别致的高档排屋，她去过别的有钱男人的家。来到三楼男人卧室的阳台，隔岸灯火距离恰到好处，并不刺眼，反而在点缀夜色。渔业船舶检验局就建造在临江一带，夜里大门紧闭，黑黢黢的建筑物在水面上静悄悄的，警备巡逻船停靠在公家的码头，能隐约听到船身与潮水拍击的动静。这幢排屋的位置选得很好，沿江，却又与江边的公路隔上一层别的排屋，视野没有因此被妨碍，更难得的是，夜间飞驰的车辆，嘈杂的声音传到这里，已经刚好成为增添夜色动人的窸窣之音。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://onceonmydoor.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
